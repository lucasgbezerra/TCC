```java
package org.zaproxy.zap.extension.custompages;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.*;
import org.junit.jupiter.api.Test;

class PopupFlagCustomPageIndicatorMenuTest {

    @Test
    void testPerformAction() {
        // Implement test logic here
    }

    @Test
    void testIsSubMenu() {
        PopupFlagCustomPageIndicatorMenu popupMenu = new PopupFlagCustomPageIndicatorMenu();
        assertThat(popupMenu.isSubMenu(), is(true));
    }

    @Test
    void testGetParentMenuName() {
        PopupFlagCustomPageIndicatorMenu popupMenu = new PopupFlagCustomPageIndicatorMenu();
        assertThat(popupMenu.getParentMenuName(), is("context.flag.popup"));
    }

    @Test
    void testGetParentWeight() {
        PopupFlagCustomPageIndicatorMenu popupMenu = new PopupFlagCustomPageIndicatorMenu();
        assertThat(popupMenu.getParentWeight(), is(MenuWeights.MENU_FLAG_CONTEXT_WEIGHT));
    }

    @Test
    void testIsEnableForComponent() {
        PopupFlagCustomPageIndicatorMenu popupMenu = new PopupFlagCustomPageIndicatorMenu();
        Component mockComponent = // Create mock component;
        assertThat(popupMenu.isEnableForComponent(mockComponent), is(false)); // Test with mock component
    }

    @Test
    void testGetSelectedText() {
        PopupFlagCustomPageIndicatorMenu popupMenu = new PopupFlagCustomPageIndicatorMenu();
        // Set selectedText
        assertThat(popupMenu.getSelectedText(), is(notNullValue()));
    }
}
``````java
package org.zaproxy.zap.extension.custompages;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.*;
import org.junit.jupiter.api.Test;

class PopupFlagCustomPageIndicatorMenuTest {

    @Test
    void testPerformAction() {
        // Add test logic here
    }

    @Test
    void testIsSubMenu() {
        Context context = new Context(); // Create Context object
        PopupFlagCustomPageIndicatorMenu popupMenu = new PopupFlagCustomPageIndicatorMenu(context);
        assertThat(popupMenu.isSubMenu(), is(true));
    }

    @Test
    void testGetParentMenuName() {
        Context context = new Context(); // Create Context object
        PopupFlagCustomPageIndicatorMenu popupMenu = new PopupFlagCustomPageIndicatorMenu(context);
        assertThat(popupMenu.getParentMenuName(), is("context.flag.popup"));
    }

    @Test
    void testGetParentWeight() {
        Context context = new Context(); // Create Context object
        PopupFlagCustomPageIndicatorMenu popupMenu = new PopupFlagCustomPageIndicatorMenu(context);
        assertThat(popupMenu.getParentWeight(), is(MenuWeights.MENU_FLAG_CONTEXT_WEIGHT));
    }

    @Test
    void testIsEnableForComponent() {
        Context context = new Context(); // Create Context object
        PopupFlagCustomPageIndicatorMenu popupMenu = new PopupFlagCustomPageIndicatorMenu(context);
        Component mockComponent = new Component(); // Create mock Component
        assertThat(popupMenu.isEnableForComponent(mockComponent), is(false)); 
    }

    @Test
    void testGetSelectedText() {
        Context context = new Context(); // Create Context object
        PopupFlagCustomPageIndicatorMenu popupMenu = new PopupFlagCustomPageIndicatorMenu(context);
        
        assertThat(popupMenu.getSelectedText(), is(notNullValue()));
    }
}
``````java
package org.zaproxy.zap.extension.custompages;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.*;
import org.junit.jupiter.api.Test;

class PopupFlagCustomPageIndicatorMenuTest {

    @Test
    void testIsSubMenu() {
        org.zaproxy.zap.extension.custompages.Context context = new org.zaproxy.zap.extension.custompages.Context();
        PopupFlagCustomPageIndicatorMenu popupMenu = new PopupFlagCustomPageIndicatorMenu(context);
        assertThat(popupMenu.isSubMenu(), is(true));
    }

    @Test
    void testGetParentMenuName() {
        org.zaproxy.zap.extension.custompages.Context context = new org.zaproxy.zap.extension.custompages.Context();
        PopupFlagCustomPageIndicatorMenu popupMenu = new PopupFlagCustomPageIndicatorMenu(context);
        assertThat(popupMenu.getParentMenuName(), is("context.flag.popup"));
    }

    @Test
    void testGetParentWeight() {
        org.zaproxy.zap.extension.custompages.Context context = new org.zaproxy.zap.extension.custompages.Context();
        PopupFlagCustomPageIndicatorMenu popupMenu = new PopupFlagCustomPageIndicatorMenu(context);
        assertThat(popupMenu.getParentWeight(), is(org.zaproxy.zap.extension.custompages.MenuWeights.MENU_FLAG_CONTEXT_WEIGHT));
    }

    @Test
    void testIsEnableForComponent() {
        org.zaproxy.zap.extension.custompages.Context context = new org.zaproxy.zap.extension.custompages.Context();
        PopupFlagCustomPageIndicatorMenu popupMenu = new PopupFlagCustomPageIndicatorMenu(context);
        org.zaproxy.zap.extension.custompages.Component mockComponent = new org.zaproxy.zap.extension.custompages.Component();
        assertThat(popupMenu.isEnableForComponent(mockComponent), is(false));
    }

    @Test
    void testGetSelectedText() {
        org.zaproxy.zap.extension.custompages.Context context = new org.zaproxy.zap.extension.custompages.Context();
        PopupFlagCustomPageIndicatorMenu popupMenu = new PopupFlagCustomPageIndicatorMenu(context);

        assertThat(popupMenu.getSelectedText(), is(notNullValue()));
    }
}
``````java
package org.zaproxy.zap.extension.custompages;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.*;
import org.junit.jupiter.api.Test;

class PopupFlagCustomPageIndicatorMenuTest {

    @Test
    void testIsSubMenu() {
        Context context = new Context();
        PopupFlagCustomPageIndicatorMenu popupMenu = new PopupFlagCustomPageIndicatorMenu(context);
        assertThat(popupMenu.isSubMenu(), is(true));
    }

    @Test
    void testGetParentMenuName() {
        Context context = new Context();
        PopupFlagCustomPageIndicatorMenu popupMenu = new PopupFlagCustomPageIndicatorMenu(context);
        assertThat(popupMenu.getParentMenuName(), is("context.flag.popup"));
    }

    @Test
    void testGetParentWeight() {
        Context context = new Context();
        PopupFlagCustomPageIndicatorMenu popupMenu = new PopupFlagCustomPageIndicatorMenu(context);
        assertThat(popupMenu.getParentWeight(), is(MenuWeights.MENU_FLAG_CONTEXT_WEIGHT));
    }

    @Test
    void testIsEnableForComponent() {
        Context context = new Context();
        PopupFlagCustomPageIndicatorMenu popupMenu = new PopupFlagCustomPageIndicatorMenu(context);
        Component mockComponent = new Component();
        assertThat(popupMenu.isEnableForComponent(mockComponent), is(false));
    }

    @Test
    void testGetSelectedText() {
        Context context = new Context();
        PopupFlagCustomPageIndicatorMenu popupMenu = new PopupFlagCustomPageIndicatorMenu(context);

        assertThat(popupMenu.getSelectedText(), is(notNullValue()));
    }
}
``````java
package org.zaproxy.zap.extension.custompages;

import org.junit.jupiter.api.Test;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.*;

class PopupFlagCustomPageIndicatorMenuTest {

    @Test
    void testIsSubMenu() {
        Context context = new Context();
        PopupFlagCustomPageIndicatorMenu popupMenu = new PopupFlagCustomPageIndicatorMenu(context);
        assertThat(popupMenu.isSubMenu(), is(true));
    }

    @Test
    void testGetParentMenuName() {
        Context context = new Context();
        PopupFlagCustomPageIndicatorMenu popupMenu = new PopupFlagCustomPageIndicatorMenu(context);
        assertThat(popupMenu.getParentMenuName(), is("context.flag.popup"));
    }

    @Test
    void testGetParentWeight() {
        Context context = new Context();
        PopupFlagCustomPageIndicatorMenu popupMenu = new PopupFlagCustomPageIndicatorMenu(context);
        assertThat(popupMenu.getParentWeight(), is(MenuWeights.MENU_FLAG_CONTEXT_WEIGHT));
    }

    @Test
    void testIsEnableForComponent() {
        Context context = new Context();
        PopupFlagCustomPageIndicatorMenu popupMenu = new PopupFlagCustomPageIndicatorMenu(context);
        Component mockComponent = new Component();
        assertThat(popupMenu.isEnableForComponent(mockComponent), is(false));
    }

    @Test
    void testGetSelectedText() {
        Context context = new Context();
        PopupFlagCustomPageIndicatorMenu popupMenu = new PopupFlagCustomPageIndicatorMenu(context);

        assertThat(popupMenu.getSelectedText(), is(notNullValue()));
    }
}
``````java
package org.parosproxy.paros.extension;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.*;

class ExtensionLoaderUnitTest {

    @Test
    void testAddExtension() {
        // Test adding an extension
    }

    @Test
    void testDestroyAllExtension() {
        // Test destroying all extensions
    }

    @Test
    void testGetExtensionByIndex() {
        // Test getting an extension by index
    }

    @Test
    void testGetExtensionByName() {
        // Test getting an extension by name
    }

    @Test
    void testGetExtensionByClassName() {
        // Test getting an extension by class name
    }

    @Test
    void testIsExtensionEnabled() {
        // Test checking if an extension is enabled
    }

    @Test
    void testGetExtensionCount() {
        // Test getting the count of extensions
    }

    @Test
    void testAddProxyServer() {
        // Test adding a proxy server
    }

    @Test
    void testHookProxies() {
        // Test hooking proxies
    }

    @Test
    void testRemoveProxyServer() {
        // Test removing a proxy server
    }

    @Test
    void testUnhookProxies() {
        // Test unhooking proxies
    }

    @Test
    void testHookProxyListener() {
        // Test hooking proxy listeners
    }

    @Test
    void testHookOverrideMessageProxyListener() {
        // Test hooking override message proxy listeners
    }

    @Test
    void testHookConnectRequestProxyListeners() {
        // Test hooking connect request proxy listeners
    }

    @Test
    void testHookPersistentConnectionListener() {
        // Test hooking persistent connection listeners
    }

    @Test
    void testHookSiteMapListener() {
        // Test hooking site map listeners
    }

    @Test
    void testHookScannerHook() {
        // Test hooking scanner hooks
    }

    @Test
    void testOptionsChangedAllPlugin() {
        // Test options changed for all plugins
    }

    @Test
    void testRunCommandLine() {
        // Test running the command line
    }

    @Test
    void testSessionChangedAllPlugin() {
        // Test session changed for all plugins
    }

    @Test
    void testDatabaseOpen() {
        // Test opening the database
    }

    @Test
    void testSessionAboutToChangeAllPlugin() {
        // Test session about to change for all plugins
    }

    @Test
    void testSessionScopeChangedAllPlugin() {
        // Test session scope changed for all plugins
    }

    @Test
    void testSessionModeChangedAllPlugin() {
        // Test session mode changed for all plugins
    }

    @Test
    void testSessionPropertiesChangedAllPlugin() {
        // Test session properties changed for all plugins
    }

    @Test
    void testAddonFilesAdded() {
        // Test adding addon files
    }

    @Test
    void testAddonFilesRemoved() {
        // Test removing addon files
    }

    @Test
    void testAddOnStatusUpdate() {
        // Test adding addon status update
    }

    @Test
    void testAddOnInstalled() {
        // Test adding addon installed
    }

    @Test
    void testAddOnSoftUninstalled() {
        // Test adding addon soft uninstalled
    }

    @Test
    void testAddOnUninstalled() {
        // Test adding addon uninstalled
    }

    @Test
    void testStartAllExtension() {
        // Test starting all extensions
    }

    @Test
    void testStartLifeCycle() {
        // Test starting the lifecycle
    }

    @Test
    void testSetExtensionAdaptorView() {
        // Test setting extension adaptor view
    }

    @Test
    void testStopAllExtension() {
        // Test stopping all extensions
    }

    @Test
    void testRemoveStatusPanel() {
        // Test removing status panel
    }

    @Test
    void testRemoveOptionsPanel() {
        // Test removing options panel
    }

    @Test
    void testRemoveOptionsParamSet() {
        // Test removing options param set
    }

    @Test
    void testRemoveWorkPanel() {
        // Test removing work panel
    }

    @Test
    void testRemovePopupMenuItem() {
        // Test removing popup menu item
    }

    @Test
    void testRemoveFileMenuItem() {
        // Test removing file menu item
    }

    @Test
    void testRemoveEditMenuItem() {
        // Test removing edit menu item
    }

    @Test
    void testRemoveViewMenuItem() {
        // Test removing view menu item
    }

    @Test
    void testRemoveToolsMenuItem() {
        // Test removing tools menu item
    }

    @Test
    void testRemoveHelpMenuItem() {
        // Test removing help menu item
    }

    @Test
    void testRemoveReportMenuItem() {
        // Test removing report menu item
    }

    @Test
    void testInitAllExtension() {
        // Test initializing all extensions
    }

    @Test
    void testInitModelAllExtension() {
        // Test initializing model for all extensions
    }

    @Test
    void testInitViewAllExtension() {
        // Test initializing view for all extensions
    }

    @Test
    void testInitXMLAllExtension() {
        // Test initializing XML for all extensions
    }

    @Test
    void testRemoveExtension() {
        // Test removing an extension
    }

    @Test
    void testGetUnsavedResources() {
        // Test getting unsaved resources
    }

    @Test
    void testGetActiveActions() {
        // Test getting active actions
    }
}
``````java
package org.parosproxy.paros.extension;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertThat;
import static org.hamcrest.Matchers.*;

class ExtensionLoaderUnitTest {

    @Test
    void testAddExtension() {
        
    }

    @Test
    void testDestroyAllExtension() {
        
    }

    @Test
    void testGetExtensionByIndex() {
        
    }

    @Test
    void testGetExtensionByName() {
        
    }

    @Test
    void testGetExtensionByClassName() {
        
    }

    @Test
    void testIsExtensionEnabled() {
        
    }

    @Test
    void testGetExtensionCount() {
        
    }

    @Test
    void testAddProxyServer() {
        
    }

    @Test
    void testHookProxies() {
        
    }

    @Test
    void testRemoveProxyServer() {
        
    }

    @Test
    void testUnhookProxies() {
        
    }

    @Test
    void testHookProxyListener() {
        
    }

    @Test
    void testHookOverrideMessageProxyListener() {
        
    }

    @Test
    void testHookConnectRequestProxyListeners() {
        
    }

    @Test
    void testHookPersistentConnectionListener() {
        
    }

    @Test
    void testHookSiteMapListener() {
        
    }

    @Test
    void testHookScannerHook() {
        
    }

    @Test
    void testOptionsChangedAllPlugin() {
        
    }

    @Test
    void testRunCommandLine() {
        
    }

    @Test
    void testSessionChangedAllPlugin() {
        
    }

    @Test
    void testDatabaseOpen() {
        
    }

    @Test
    void testSessionAboutToChangeAllPlugin() {
        
    }

    @Test
    void testSessionScopeChangedAllPlugin() {
        
    }

    @Test
    void testSessionModeChangedAllPlugin() {
        
    }

    @Test
    void testSessionPropertiesChangedAllPlugin() {
        
    }

    @Test
    void testAddonFilesAdded() {
        
    }

    @Test
    void testAddonFilesRemoved() {
        
    }

    @Test
    void testAddOnStatusUpdate() {
        
    }

    @Test
    void testAddOnInstalled() {
        
    }

    @Test
    void testAddOnSoftUninstalled() {
        
    }

    @Test
    void testAddOnUninstalled() {
        
    }

    @Test
    void testStartAllExtension() {
        
    }

    @Test
    void testStartLifeCycle() {
        
    }

    @Test
    void testSetExtensionAdaptorView() {
        
    }

    @Test
    void testStopAllExtension() {
        
    }

    @Test
    void testRemoveStatusPanel() {
        
    }

    @Test
    void testRemoveOptionsPanel() {
        
    }

    @Test
    void testRemoveOptionsParamSet() {
        
    }

    @Test
    void testRemoveWorkPanel() {
        
    }

    @Test
    void testRemovePopupMenuItem() {
        
    }

    @Test
    void testRemoveFileMenuItem() {
        
    }

    @Test
    void testRemoveEditMenuItem() {
        
    }

    @Test
    void testRemoveViewMenuItem() {
        
    }

    @Test
    void testRemoveToolsMenuItem() {
        
    }

    @Test
    void testRemoveHelpMenuItem() {
        
    }

    @Test
    void testRemoveReportMenuItem() {
        
    }

    @Test
    void testInitAllExtension() {
        
    }

    @Test
    void testInitModelAllExtension() {
        
    }

    @Test
    void testInitViewAllExtension() {
        
    }

    @Test
    void testInitXMLAllExtension() {
        
    }

    @Test
    void testRemoveExtension() {
        
    }

    @Test
    void testGetUnsavedResources() {
        
    }

    @Test
    void testGetActiveActions() {
        
    }
}
``````java
package org.parosproxy.paros.extension;

import org.junit.jupiter.api.Test;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.*;

class ExtensionLoaderUnitTest {

    @Test
    void testAddExtension() {
        
    }

    @Test
    void testDestroyAllExtension() {
        
    }

    @Test
    void testGetExtensionByIndex() {
        
    }

    @Test
    void testGetExtensionByName() {
        
    }

    @Test
    void testGetExtensionByClassName() {
        
    }

    @Test
    void testIsExtensionEnabled() {
        
    }

    @Test
    void testGetExtensionCount() {
        
    }

    @Test
    void testAddProxyServer() {
        
    }

    @Test
    void testHookProxies() {
        
    }

    @Test
    void testRemoveProxyServer() {
        
    }

    @Test
    void testUnhookProxies() {
        
    }

    @Test
    void testHookProxyListener() {
        
    }

    @Test
    void testHookOverrideMessageProxyListener() {
        
    }

    @Test
    void testHookConnectRequestProxyListeners() {
        
    }

    @Test
    void testHookPersistentConnectionListener() {
        
    }

    @Test
    void testHookSiteMapListener() {
        
    }

    @Test
    void testHookScannerHook() {
        
    }

    @Test
    void testOptionsChangedAllPlugin() {
        
    }

    @Test
    void testRunCommandLine() {
        
    }

    @Test
    void testSessionChangedAllPlugin() {
        
    }

    @Test
    void testDatabaseOpen() {
        
    }

    @Test
    void testSessionAboutToChangeAllPlugin() {
        
    }

    @Test
    void testSessionScopeChangedAllPlugin() {
        
    }

    @Test
    void testSessionModeChangedAllPlugin() {
        
    }

    @Test
    void testSessionPropertiesChangedAllPlugin() {
        
    }

    @Test
    void testAddonFilesAdded() {
        
    }

    @Test
    void testAddonFilesRemoved() {
        
    }

    @Test
    void testAddOnStatusUpdate() {
        
    }

    @Test
    void testAddOnInstalled() {
        
    }

    @Test
    void testAddOnSoftUninstalled() {
        
    }

    @Test
    void testAddOnUninstalled() {
        
    }

    @Test
    void testStartAllExtension() {
        
    }

    @Test
    void testStartLifeCycle() {
        
    }

    @Test
    void testSetExtensionAdaptorView() {
        
    }

    @Test
    void testStopAllExtension() {
        
    }

    @Test
    void testRemoveStatusPanel() {
        
    }

    @Test
    void testRemoveOptionsPanel() {
        
    }

    @Test
    void testRemoveOptionsParamSet() {
        
    }

    @Test
    void testRemoveWorkPanel() {
        
    }

    @Test
    void testRemovePopupMenuItem() {
        
    }

    @Test
    void testRemoveFileMenuItem() {
        
    }

    @Test
    void testRemoveEditMenuItem() {
        
    }

    @Test
    void testRemoveViewMenuItem() {
        
    }

    @Test
    void testRemoveToolsMenuItem() {
        
    }

    @Test
    void testRemoveHelpMenuItem() {
        
    }

    @Test
    void testRemoveReportMenuItem() {
        
    }

    @Test
    void testInitAllExtension() {
        
    }

    @Test
    void testInitModelAllExtension() {
        
    }

    @Test
    void testInitViewAllExtension() {
        
    }

    @Test
    void testInitXMLAllExtension() {
        
    }

    @Test
    void testRemoveExtension() {
        
    }

    @Test
    void testGetUnsavedResources() {
        
    }

    @Test
    void testGetActiveActions() {
        
    }
}
``````java
package org.parosproxy.paros.extension;

import org.junit.jupiter.api.Test;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.is;

class ExtensionLoaderUnitTest {

    @Test
    void testAddExtension() {
        
    }

    @Test
    void testDestroyAllExtension() {
        
    }

    @Test
    void testGetExtensionByIndex() {
        
    }

    @Test
    void testGetExtensionByName() {
        
    }

    @Test
    void testGetExtensionByClassName() {
        
    }

    @Test
    void testIsExtensionEnabled() {
        
    }

    @Test
    void testGetExtensionCount() {
        
    }

    @Test
    void testAddProxyServer() {
        
    }

    @Test
    void testHookProxies() {
        
    }

    @Test
    void testRemoveProxyServer() {
        
    }

    @Test
    void testUnhookProxies() {
        
    }

    @Test
    void testHookProxyListener() {
        
    }

    @Test
    void testHookOverrideMessageProxyListener() {
        
    }

    @Test
    void testHookConnectRequestProxyListeners() {
        
    }

    @Test
    void testHookPersistentConnectionListener() {
        
    }

    @Test
    void testHookSiteMapListener() {
        
    }

    @Test
    void testHookScannerHook() {
        
    }

    @Test
    void testOptionsChangedAllPlugin() {
        
    }

    @Test
    void testRunCommandLine() {
        
    }

    @Test
    void testSessionChangedAllPlugin() {
        
    }

    @Test
    void testDatabaseOpen() {
        
    }

    @Test
    void testSessionAboutToChangeAllPlugin() {
        
    }

    @Test
    void testSessionScopeChangedAllPlugin() {
        
    }

    @Test
    void testSessionModeChangedAllPlugin() {
        
    }

    @Test
    void testSessionPropertiesChangedAllPlugin() {
        
    }

    @Test
    void testAddonFilesAdded() {
        
    }

    @Test
    void testAddonFilesRemoved() {
        
    }

    @Test
    void testAddOnStatusUpdate() {
        
    }

    @Test
    void testAddOnInstalled() {
        
    }

    @Test
    void testAddOnSoftUninstalled() {
        
    }

    @Test
    void testAddOnUninstalled() {
        
    }

    @Test
    void testStartAllExtension() {
        
    }

    @Test
    void testStartLifeCycle() {
        
    }

    @Test
    void testSetExtensionAdaptorView() {
        
    }

    @Test
    void testStopAllExtension() {
        
    }

    @Test
    void testRemoveStatusPanel() {
        
    }

    @Test
    void testRemoveOptionsPanel() {
        
    }

    @Test
    void testRemoveOptionsParamSet() {
        
    }

    @Test
    void testRemoveWorkPanel() {
        
    }

    @Test
    void testRemovePopupMenuItem() {
        
    }

    @Test
    void testRemoveFileMenuItem() {
        
    }

    @Test
    void testRemoveEditMenuItem() {
        
    }

    @Test
    void testRemoveViewMenuItem() {
        
    }

    @Test
    void testRemoveToolsMenuItem() {
        
    }

    @Test
    void testRemoveHelpMenuItem() {
        
    }

    @Test
    void testRemoveReportMenuItem() {
        
    }

    @Test
    void testInitAllExtension() {
        
    }

    @Test
    void testInitModelAllExtension() {
        
    }

    @Test
    void testInitViewAllExtension() {
        
    }

    @Test
    void testInitXMLAllExtension() {
        
    }

    @Test
    void testRemoveExtension() {
        
    }

    @Test
    void testGetUnsavedResources() {
        
    }

    @Test
    void testGetActiveActions() {
        
    }
}
``````java
package org.zaproxy.zap.utils;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

import org.junit.jupiter.api.Test;

import java.util.HashMap;
import java.util.Map;

public class EncodingUtilsTest {

    @Test
    void testMapToString_EmptyMap() {
        Map<String, String> map = new HashMap<>();
        String result = EncodingUtils.mapToString(map);
        assertNotNull(result);
        assertEquals("", result);
    }

    @Test
    void testMapToString_SingleEntryMap() {
        Map<String, String> map = new HashMap<>();
        map.put("key1", "value1");
        String result = EncodingUtils.mapToString(map);
        assertNotNull(result);
        assertEquals("a2V5MQ==:dmFsdWUx", result);
    }

    @Test
    void testMapToString_MultipleEntriesMap() {
        Map<String, String> map = new HashMap<>();
        map.put("key1", "value1");
        map.put("key2", "value2");
        String result = EncodingUtils.mapToString(map);
        assertNotNull(result);
        assertEquals("a2V5MQ==:dmFsdWUx&a2V5Mg==:dmFsdWUy", result);
    }

    @Test
    void testMapToString_NullValuesInMap() {
        Map<String, String> map = new HashMap<>();
        map.put("key1", null);
        String result = EncodingUtils.mapToString(map);
        assertNotNull(result);
        assertEquals("a2V5MQ==:&", result);
    }
}
``````java
package org.zaproxy.zap.utils;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

import org.junit.jupiter.api.Test;

import java.util.HashMap;
import java.util.Map;

public class EncodingUtilsTest {

    @Test
    void testMapToString_EmptyMap() {
        Map<String, String> map = new HashMap<>();
        String result = EncodingUtils.mapToString(map);
        assertNotNull(result);
        assertEquals("", result);
    }

    @Test
    void testMapToString_SingleEntryMap() {
        Map<String, String> map = new HashMap<>();
        map.put("key1", "value1");
        String result = EncodingUtils.mapToString(map);
        assertNotNull(result);
        assertEquals("key1:value1", result);
    }

    @Test
    void testMapToString_MultipleEntriesMap() {
        Map<String, String> map = new HashMap<>();
        map.put("key1", "value1");
        map.put("key2", "value2");
        String result = EncodingUtils.mapToString(map);
        assertNotNull(result);
        assertEquals("key1:value1&key2:value2", result);
    }

    @Test
    void testMapToString_NullValuesInMap() {
        Map<String, String> map = new HashMap<>();
        map.put("key1", null);
        String result = EncodingUtils.mapToString(map);
        assertNotNull(result);
        assertEquals("key1:&", result);
    }
}
``````java
package org.zaproxy.zap.utils;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

import org.junit.jupiter.api.Test;

import java.util.HashMap;
import java.util.Map;

public class EncodingUtilsTest {

    @Test
    void testMapToString_EmptyMap() {
        Map<String, String> map = new HashMap<>();
        String result = EncodingUtils.mapToString(map);
        assertNotNull(result);
        assertEquals("", result);
    }

    @Test
    void testMapToString_SingleEntryMap() {
        Map<String, String> map = new HashMap<>();
        map.put("key1", "value1");
        String result = EncodingUtils.mapToString(map);
        assertNotNull(result);
        assertEquals("key1:value1", result);
    }

    @Test
    void testMapToString_MultipleEntriesMap() {
        Map<String, String> map = new HashMap<>();
        map.put("key1", "value1");
        map.put("key2", "value2");
        String result = EncodingUtils.mapToString(map);
        assertNotNull(result);
        assertEquals("key1:value1&key2:value2", result);
    }

    @Test
    void testMapToString_NullValuesInMap() {
        Map<String, String> map = new HashMap<>();
        map.put("key1", null);
        String result = EncodingUtils.mapToString(map);
        assertNotNull(result);
        assertEquals("key1:&", result);
    }
}
``````java
package org.zaproxy.zap.utils;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

import org.junit.jupiter.api.Test;

import java.util.HashMap;
import java.util.Map;

public class EncodingUtilsTest {

    @Test
    void testMapToString_EmptyMap() {
        Map<String, String> map = new HashMap<>();
        String result = EncodingUtils.mapToString(map);
        assertNotNull(result);
        assertEquals("", result);
    }

    @Test
    void testMapToString_SingleEntryMap() {
        Map<String, String> map = new HashMap<>();
        map.put("key1", "value1");
        String result = EncodingUtils.mapToString(map);
        assertNotNull(result);
        assertEquals("key1:value1", result);
    }

    @Test
    void testMapToString_MultipleEntriesMap() {
        Map<String, String> map = new HashMap<>();
        map.put("key1", "value1");
        map.put("key2", "value2");
        String result = EncodingUtils.mapToString(map);
        assertNotNull(result);
        assertEquals("key1:value1&key2:value2", result);
    }

    @Test
    void testMapToString_NullValuesInMap() {
        Map<String, String> map = new HashMap<>();
        map.put("key1", null);
        String result = EncodingUtils.mapToString(map);
        assertNotNull(result);
        assertEquals("key1:&", result);
    }
}
```Updated and corrected test suite code:

```java
package org.zaproxy.zap.utils;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

import java.util.HashMap;
import java.util.Map;

public class EncodingUtilsTest {

    @Test
    void testMapToString_EmptyMap() {
        Map<String, String> map = new HashMap<>();
        String result = EncodingUtils.mapToString(map);
        assertNotNull(result);
        assertEquals("", result);
    }

    @Test
    void testMapToString_SingleEntryMap() {
        Map<String, String> map = new HashMap<>();
        map.put("key1", "value1");
        String result = EncodingUtils.mapToString(map);
        assertNotNull(result);
        assertEquals("key1:value1", result);
    }

    @Test
    void testMapToString_MultipleEntriesMap() {
        Map<String, String> map = new HashMap<>();
        map.put("key1", "value1");
        map.put("key2", "value2");
        String result = EncodingUtils.mapToString(map);
        assertNotNull(result);
        assertEquals("key1:value1&key2:value2", result);
    }

    @Test
    void testMapToString_NullValuesInMap() {
        Map<String, String> map = new HashMap<>();
        map.put("key1", null);
        String result = EncodingUtils.mapToString(map);
        assertNotNull(result);
        assertEquals("key1:&", result);
    }
}
``````java
package org.zaproxy.zap.extension.httppanel.view.paramtable;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.mock;
import org.junit.jupiter.api.Test;

class HttpPanelParamTableModelTest {

    @Test
    void testGetColumnCount() {
        HttpPanelParamTableModel model = mock(HttpPanelParamTableModel.class);
        model.setEditable(true);
        assertEquals(4, model.getColumnCount());
    }

    @Test
    void testGetRowCount() {
        HttpPanelParamTableModel model = mock(HttpPanelParamTableModel.class);
        assertEquals(0, model.getRowCount());
    }

    @Test
    void testGetValueAt() {
        // Add test logic here
    }

    @Test
    void testGetColumnClass() {
        HttpPanelParamTableModel model = mock(HttpPanelParamTableModel.class);
        assertEquals(String.class, model.getColumnClass(0));
    }

    @Test
    void testSetValueAt() {
        // Add test logic here
    }

    @Test
    void testHasChanged() {
        HttpPanelParamTableModel model = mock(HttpPanelParamTableModel.class);
        assertEquals(false, model.hasChanged());
    }

    @Test
    void testIsCellEditable() {
        HttpPanelParamTableModel model = mock(HttpPanelParamTableModel.class);
        assertEquals(false, model.isCellEditable(0, 0));
    }

    @Test
    void testSetEditable() {
        HttpPanelParamTableModel model = mock(HttpPanelParamTableModel.class);
        model.setEditable(true);
        assertEquals(true, model.isCellEditable(0, 0));
    }

    @Test
    void testSetHttpMessage() {
        // Add test logic here
    }

    @Test
    void testGetHttpMessage() {
        // Add test logic here
    }

    @Test
    void testSave() {
        // Add test logic here
    }

    @Test
    void testGetColumnName() {
        HttpPanelParamTableModel model = mock(HttpPanelParamTableModel.class);
        assertEquals("Type", model.getColumnName(0));
    }
}
``````java
package org.zaproxy.zap.extension.httppanel.view.paramtable;

import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;

class HttpPanelParamTableModelTest {

    @Test
    void testGetColumnCount() {
        HttpPanelParamTableModel model = new HttpPanelParamTableModel();
        model.setEditable(true);
        assertEquals(4, model.getColumnCount());
    }

    @Test
    void testGetRowCount() {
        HttpPanelParamTableModel model = new HttpPanelParamTableModel();
        assertEquals(0, model.getRowCount());
    }

    @Test
    void testGetColumnClass() {
        HttpPanelParamTableModel model = new HttpPanelParamTableModel();
        assertEquals(String.class, model.getColumnClass(0));
    }

    @Test
    void testHasChanged() {
        HttpPanelParamTableModel model = new HttpPanelParamTableModel();
        assertEquals(false, model.hasChanged());
    }

    @Test
    void testIsCellEditable() {
        HttpPanelParamTableModel model = new HttpPanelParamTableModel();
        assertEquals(false, model.isCellEditable(0, 0));
    }

    @Test
    void testSetEditable() {
        HttpPanelParamTableModel model = new HttpPanelParamTableModel();
        model.setEditable(true);
        assertEquals(true, model.isCellEditable(0, 0));
    }

    @Test
    void testGetColumnName() {
        HttpPanelParamTableModel model = new HttpPanelParamTableModel();
        assertEquals("Type", model.getColumnName(0));
    }
}
``````java
package org.zaproxy.zap.extension.httppanel.view.paramtable;

import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;

public class HttpPanelParamTableModelTest {

    @Test
    void testGetColumnCount() {
        HttpPanelParamTableModel model = new HttpPanelParamTableModel();
        model.setEditable(true);
        assertEquals(4, model.getColumnCount());
    }

    @Test
    void testGetRowCount() {
        HttpPanelParamTableModel model = new HttpPanelParamTableModel();
        assertEquals(0, model.getRowCount());
    }

    @Test
    void testGetColumnClass() {
        HttpPanelParamTableModel model = new HttpPanelParamTableModel();
        assertEquals(String.class, model.getColumnClass(0));
    }

    @Test
    void testHasChanged() {
        HttpPanelParamTableModel model = new HttpPanelParamTableModel();
        assertEquals(false, model.hasChanged());
    }

    @Test
    void testIsCellEditable() {
        HttpPanelParamTableModel model = new HttpPanelParamTableModel();
        assertEquals(false, model.isCellEditable(0, 0));
    }

    @Test
    void testSetEditable() {
        HttpPanelParamTableModel model = new HttpPanelParamTableModel();
        model.setEditable(true);
        assertEquals(true, model.isCellEditable(0, 0));
    }

    @Test
    void testGetColumnName() {
        HttpPanelParamTableModel model = new HttpPanelParamTableModel();
        assertEquals("Type", model.getColumnName(0));
    }
}
``````java
package org.zaproxy.zap.extension.httppanel.view.paramtable;

import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;

public class HttpPanelParamTableModelTest {

    @Test
    void testGetColumnCount() {
        HttpPanelParamTableModel model = new HttpPanelParamTableModel(null); // Add required constructor parameter or create a mock object
        model.setEditable(true);
        assertEquals(4, model.getColumnCount());
    }

    @Test
    void testGetRowCount() {
        HttpPanelParamTableModel model = new HttpPanelParamTableModel(null); // Add required constructor parameter or create a mock object
        assertEquals(0, model.getRowCount());
    }

    @Test
    void testGetColumnClass() {
        HttpPanelParamTableModel model = new HttpPanelParamTableModel(null); // Add required constructor parameter or create a mock object
        assertEquals(String.class, model.getColumnClass(0));
    }

    @Test
    void testHasChanged() {
        HttpPanelParamTableModel model = new HttpPanelParamTableModel(null); // Add required constructor parameter or create a mock object
        assertEquals(false, model.hasChanged());
    }

    @Test
    void testIsCellEditable() {
        HttpPanelParamTableModel model = new HttpPanelParamTableModel(null); // Add required constructor parameter or create a mock object
        assertEquals(false, model.isCellEditable(0, 0));
    }

    @Test
    void testSetEditable() {
        HttpPanelParamTableModel model = new HttpPanelParamTableModel(null); // Add required constructor parameter or create a mock object
        model.setEditable(true);
        assertEquals(true, model.isCellEditable(0, 0));
    }

    @Test
    void testGetColumnName() {
        HttpPanelParamTableModel model = new HttpPanelParamTableModel(null); // Add required constructor parameter or create a mock object
        assertEquals("Type", model.getColumnName(0));
    }
}
``````java
package org.zaproxy.zap.extension.httppanel.view.paramtable;

import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;

public class HttpPanelParamTableModelTest {

    @Test
    void testGetColumnCount() {
        HttpPanelParamTableModel model = new HttpPanelParamTableModel(); 
        model.setEditable(true);
        assertEquals(4, model.getColumnCount());
    }

    @Test
    void testGetRowCount() {
        HttpPanelParamTableModel model = new HttpPanelParamTableModel(); 
        assertEquals(0, model.getRowCount());
    }

    @Test
    void testGetColumnClass() {
        HttpPanelParamTableModel model = new HttpPanelParamTableModel(); 
        assertEquals(String.class, model.getColumnClass(0));
    }

    @Test
    void testHasChanged() {
        HttpPanelParamTableModel model = new HttpPanelParamTableModel(); 
        assertEquals(false, model.hasChanged());
    }

    @Test
    void testIsCellEditable() {
        HttpPanelParamTableModel model = new HttpPanelParamTableModel(); 
        assertEquals(false, model.isCellEditable(0, 0));
    }

    @Test
    void testSetEditable() {
        HttpPanelParamTableModel model = new HttpPanelParamTableModel(); 
        model.setEditable(true);
        assertEquals(true, model.isCellEditable(0, 0));
    }

    @Test
    void testGetColumnName() {
        HttpPanelParamTableModel model = new HttpPanelParamTableModel(); 
        assertEquals("Type", model.getColumnName(0));
    }
}
```Test Class:

```java
package org.zaproxy.zap.extension.ascan.filters.impl;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import java.util.regex.Pattern;

import org.junit.jupiter.api.Test;
import org.zaproxy.zap.extension.ascan.filters.FilterResult;
import org.zaproxy.zap.model.StructuralNode;

public class UrlPatternScanFilterTest {

    @Test
    public void testIsFiltered_NotFiltered() {
        UrlPatternScanFilter filter = new UrlPatternScanFilter();
        StructuralNode node = mock(StructuralNode.class);
        when(node.getHistoryReference().getURI().toString()).thenReturn("http://example.com/page");
        
        FilterResult result = filter.isFiltered(node);
        
        assertEquals(FilterResult.NOT_FILTERED, result);
    }
    
    @Test
    public void testIsFiltered_Filtered() {
        UrlPatternScanFilter filter = new UrlPatternScanFilter();
        StructuralNode node = mock(StructuralNode.class);
        when(node.getHistoryReference().getURI().toString()).thenReturn("https://example.com/admin");
        
        FilterResult result = filter.isFiltered(node);
        
        assertEquals(FilterResult.FILTERED, result);
    }
    
    @Test
    public void testGetFilterType() {
        UrlPatternScanFilter filter = new UrlPatternScanFilter();
        
        String filterType = filter.getFilterType();
        
        assertEquals("scan.filter.filterType.URLPattern", filterType);
    }
}
``````java
package org.zaproxy.zap.extension.ascan.filters.impl;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import org.junit.jupiter.api.Test;
import org.zaproxy.zap.extension.ascan.filters.FilterResult;
import org.zaproxy.zap.model.StructuralNode;

public class UrlPatternScanFilterTest {

    @Test
    public void testIsFiltered_NotFiltered() {
        UrlPatternScanFilter filter = new UrlPatternScanFilter();
        StructuralNode node = mock(StructuralNode.class);
        when(node.getHistoryReference().getURI().toString()).thenReturn("http:");
        
        FilterResult result = filter.isFiltered(node);
        
        assertEquals(FilterResult.NOT_FILTERED, result);
    }
    
    @Test
    public void testIsFiltered_Filtered() {
        UrlPatternScanFilter filter = new UrlPatternScanFilter();
        StructuralNode node = mock(StructuralNode.class);
        when(node.getHistoryReference().getURI().toString()).thenReturn("https:");
        
        FilterResult result = filter.isFiltered(node);
        
        assertEquals(FilterResult.FILTERED, result);
    }
    
    @Test
    public void testGetFilterType() {
        UrlPatternScanFilter filter = new UrlPatternScanFilter();
        
        String filterType = filter.getFilterType();
        
        assertEquals("scan.filter.filterType.URLPattern", filterType);
    }
}
``````java
package org.zaproxy.zap.extension.ascan.filters.impl;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import org.junit.jupiter.api.Test;
import org.zaproxy.zap.extension.ascan.filters.FilterResult;
import org.zaproxy.zap.model.StructuralNode;

public class UrlPatternScanFilterTest {

    @Test
    public void testIsFiltered_NotFiltered() {
        UrlPatternScanFilter filter = new UrlPatternScanFilter();
        StructuralNode node = mock(StructuralNode.class);
        when(node.getHistoryReference().getURI().toString()).thenReturn("http:");
        
        FilterResult result = filter.isFiltered(node);
        
        assertEquals(FilterResult.NOT_FILTERED, result);
    }
    
    @Test
    public void testIsFiltered_Filtered() {
        UrlPatternScanFilter filter = new UrlPatternScanFilter();
        StructuralNode node = mock(StructuralNode.class);
        when(node.getHistoryReference().getURI().toString()).thenReturn("https:");
        
        FilterResult result = filter.isFiltered(node);
        
        assertEquals(FilterResult.FILTERED, result);
    }
    
    @Test
    public void testGetFilterType() {
        UrlPatternScanFilter filter = new UrlPatternScanFilter();
        
        String filterType = filter.getFilterType();
        
        assertEquals("scan.filter.filterType.URLPattern", filterType);
    }
}
``````java
package org.zaproxy.zap.extension.ascan.filters.impl;

import org.junit.jupiter.api.Test;
import org.zaproxy.zap.extension.ascan.filters.FilterResult;
import org.zaproxy.zap.model.StructuralNode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class UrlPatternScanFilterTest {

    @Test
    public void testIsFiltered_NotFiltered() {
        UrlPatternScanFilter filter = new UrlPatternScanFilter();
        StructuralNode node = mock(StructuralNode.class);
        when(node.getHistoryReference().getURI().toString()).thenReturn("http:");
        
        FilterResult result = filter.isFiltered(node);
        
        assertEquals(FilterResult.NOT_FILTERED, result);
    }
    
    @Test
    public void testIsFiltered_Filtered() {
        UrlPatternScanFilter filter = new UrlPatternScanFilter();
        StructuralNode node = mock(StructuralNode.class);
        when(node.getHistoryReference().getURI().toString()).thenReturn("https:");
        
        FilterResult result = filter.isFiltered(node);
        
        assertEquals(FilterResult.FILTERED, result);
    }
    
    @Test
    public void testGetFilterType() {
        UrlPatternScanFilter filter = new UrlPatternScanFilter();
        
        String filterType = filter.getFilterType();
        
        assertEquals("scan.filter.filterType.URLPattern", filterType);
    }
}
``````java
package org.zaproxy.zap.extension.ascan.filters.impl;

import org.junit.jupiter.api.Test;
import org.zaproxy.zap.extension.ascan.filters.FilterResult;
import org.zaproxy.zap.model.StructuralNode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class UrlPatternScanFilterTest {

    @Test
    public void testIsFiltered_NotFiltered() {
        UrlPatternScanFilter filter = new UrlPatternScanFilter();
        StructuralNode node = mock(StructuralNode.class);
        when(node.getHistoryReference().getURI().toString()).thenReturn("http:");
        
        FilterResult result = filter.isFiltered(node);
        
        assertEquals(FilterResult.NOT_FILTERED, result);
    }
    
    @Test
    public void testIsFiltered_Filtered() {
        UrlPatternScanFilter filter = new UrlPatternScanFilter();
        StructuralNode node = mock(StructuralNode.class);
        when(node.getHistoryReference().getURI().toString()).thenReturn("https:");
        
        FilterResult result = filter.isFiltered(node);
        
        assertEquals(FilterResult.FILTERED, result);
    }
    
    @Test
    public void testGetFilterType() {
        UrlPatternScanFilter filter = new UrlPatternScanFilter();
        
        String filterType = filter.getFilterType();
        
        assertEquals("scan.filter.filterType.URLPattern", filterType);
    }
}
```