Generate unit test cases for the following method(s) in JUnit 5:

- Method name(s): performAction, isSubMenu, getParentMenuName, getParentWeight, isEnableForComponent, getSelectedText
- Class name: PopupFlagCustomPageIndicatorMenu
- Class path: /home/lucas/tcc/reps/zaproxy/zap/src/main/java/org/zaproxy/zap/extension/custompages/PopupFlagCustomPageIndicatorMenu.java
- The class is written in Java.
- Create the unit tests using the following libraries: org.hamcrest and org.junit.jupiter.api.Test.

Follow these instructions carefully:
1. The test class name should be PopupFlagCustomPageIndicatorMenuTest.
2. If necessary, create mock objects.
3. Implement the test logic for each method, including setup, execution, and verification of results.
4. Use assertions to verify that the method behaves as expected.
5. Include the correct package declaration at the top of the file.
6. Ensure that all necessary imports for classes used in the tests are included.
7. Each test case should be clearly named and include specific logic to test different scenarios and edge cases.
8. Avoid generating test methods with placeholder comments. 
9. Make sure each test has assertion.

Make sure the tests are complete and avoid compile errors.

Class Code:

package org.zaproxy.zap.extension.custompages;

import java.awt.Component;
import java.util.regex.Pattern;
import javax.swing.SwingUtilities;
import javax.swing.text.JTextComponent;
import org.parosproxy.paros.Constant;
import org.parosproxy.paros.extension.ExtensionPopupMenuItem;
import org.parosproxy.paros.model.Model;
import org.parosproxy.paros.view.View;
import org.zaproxy.zap.extension.httppanel.HttpPanelResponse;
import org.zaproxy.zap.model.Context;
import org.zaproxy.zap.view.popup.MenuWeights;


public class PopupFlagCustomPageIndicatorMenu extends ExtensionPopupMenuItem {

    private static final long serialVersionUID = 6071498013529265858L;
    private String selectedText = null;
    private int contextId;

    public PopupFlagCustomPageIndicatorMenu(Context ctx) {
        this.contextId = ctx.getId();

        this.setText(Constant.messages.getString("custompages.popup.indicator", ctx.getName()));
        this.addActionListener(event -> performAction());
    }

    private void performAction() {
        Context currentContext = Model.getSingleton().getSession().getContext(this.contextId);

        DialogAddCustomPage dialogAddCustomPage =
                getDialogAddCustomPage(currentContext, getSelectedText());
        dialogAddCustomPage.setVisible(true);
        currentContext.addCustomPage(dialogAddCustomPage.getCustomPage());
    }

    private DialogAddCustomPage getDialogAddCustomPage(
            Context currentContext, String selectedText) {
        DialogAddCustomPage dialogAddCustomPage =
                new DialogAddCustomPage(View.getSingleton().getMainFrame());
        dialogAddCustomPage.setWorkingContext(currentContext);
        dialogAddCustomPage.getPageMatcherTextField().setText(Pattern.quote(selectedText));
        dialogAddCustomPage.getRegexCheckBox().setSelected(true);
        return dialogAddCustomPage;
    }

    @Override
    public boolean isSubMenu() {
        return true;
    }

    @Override
    public String getParentMenuName() {
        return Constant.messages.getString("context.flag.popup");
    }

    @Override
    public int getParentWeight() {
        return MenuWeights.MENU_FLAG_CONTEXT_WEIGHT;
    }

    @Override
    public boolean isEnableForComponent(Component invoker) {
        if (invoker instanceof JTextComponent) {
            
            JTextComponent txtComponent = (JTextComponent) invoker;
            boolean responsePanel =
                    (SwingUtilities.getAncestorOfClass(HttpPanelResponse.class, txtComponent)
                            != null);

            if (!responsePanel) {
                selectedText = null;
                return false;
            }

            
            selectedText = txtComponent.getSelectedText();
            this.setEnabled(selectedText != null && selectedText.length() != 0);

            return true;
        } else {
            selectedText = null;
            return false;
        }
    }

    public String getSelectedText() {
        return selectedText;
    }
}
Instructions for correction:
1. Review the provided test suite written in Java, using JUnit 5.
2. Identify the cause of the error based on the error output.
3. Make sure all imports are done correctly and the package is declared correctly
4. If required, create mock objects or add missing dependencies to ensure the tests run correctly.
5. If some test cases in the suite fail, just remove them from the suite
6. Ensure that the test suite code avoids using wildcard imports (static or non-static).
7. Return only the corrected and updated test suite code.

Below is the code of test suite. When executing the test suite, the following error output occurred.

Test suite:

package org.zaproxy.zap.extension.custompages;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.*;
import org.junit.jupiter.api.Test;

class PopupFlagCustomPageIndicatorMenuTest {

    @Test
    void testPerformAction() {
        
    }

    @Test
    void testIsSubMenu() {
        PopupFlagCustomPageIndicatorMenu popupMenu = new PopupFlagCustomPageIndicatorMenu();
        assertThat(popupMenu.isSubMenu(), is(true));
    }

    @Test
    void testGetParentMenuName() {
        PopupFlagCustomPageIndicatorMenu popupMenu = new PopupFlagCustomPageIndicatorMenu();
        assertThat(popupMenu.getParentMenuName(), is("context.flag.popup"));
    }

    @Test
    void testGetParentWeight() {
        PopupFlagCustomPageIndicatorMenu popupMenu = new PopupFlagCustomPageIndicatorMenu();
        assertThat(popupMenu.getParentWeight(), is(MenuWeights.MENU_FLAG_CONTEXT_WEIGHT));
    }

    @Test
    void testIsEnableForComponent() {
        PopupFlagCustomPageIndicatorMenu popupMenu = new PopupFlagCustomPageIndicatorMenu();
        Component mockComponent = 
        assertThat(popupMenu.isEnableForComponent(mockComponent), is(false)); 
    }

    @Test
    void testGetSelectedText() {
        PopupFlagCustomPageIndicatorMenu popupMenu = new PopupFlagCustomPageIndicatorMenu();
        
        assertThat(popupMenu.getSelectedText(), is(notNullValue()));
    }
}


Error output when running the test suite:
/home/lucas/tcc/reps/zaproxy/zap/src/test/java/org/zaproxy/zap/extension/custompages/PopupFlagCustomPageIndicatorMenuTest.java:17: error: constructor PopupFlagCustomPageIndicatorMenu in class PopupFlagCustomPageIndicatorMenu cannot be applied to given types;
        PopupFlagCustomPageIndicatorMenu popupMenu = new PopupFlagCustomPageIndicatorMenu();
                                                     ^
  required: Context
  found:    no arguments
  reason: actual and formal argument lists differ in length
/home/lucas/tcc/reps/zaproxy/zap/src/test/java/org/zaproxy/zap/extension/custompages/PopupFlagCustomPageIndicatorMenuTest.java:23: error: constructor PopupFlagCustomPageIndicatorMenu in class PopupFlagCustomPageIndicatorMenu cannot be applied to given types;
        PopupFlagCustomPageIndicatorMenu popupMenu = new PopupFlagCustomPageIndicatorMenu();
                                                     ^
  required: Context
  found:    no arguments
  reason: actual and formal argument lists differ in length
/home/lucas/tcc/reps/zaproxy/zap/src/test/java/org/zaproxy/zap/extension/custompages/PopupFlagCustomPageIndicatorMenuTest.java:29: error: constructor PopupFlagCustomPageIndicatorMenu in class PopupFlagCustomPageIndicatorMenu cannot be applied to given types;
        PopupFlagCustomPageIndicatorMenu popupMenu = new PopupFlagCustomPageIndicatorMenu();
                                                     ^
  required: Context
  found:    no arguments
  reason: actual and formal argument lists differ in length
/home/lucas/tcc/reps/zaproxy/zap/src/test/java/org/zaproxy/zap/extension/custompages/PopupFlagCustomPageIndicatorMenuTest.java:30: error: cannot find symbol
        assertThat(popupMenu.getParentWeight(), is(MenuWeights.MENU_FLAG_CONTEXT_WEIGHT));
                                                   ^
  symbol:   variable MenuWeights
  location: class PopupFlagCustomPageIndicatorMenuTest
/home/lucas/tcc/reps/zaproxy/zap/src/test/java/org/zaproxy/zap/extension/custompages/PopupFlagCustomPageIndicatorMenuTest.java:35: error: constructor PopupFlagCustomPageIndicatorMenu in class PopupFlagCustomPageIndicatorMenu cannot be applied to given types;
        PopupFlagCustomPageIndicatorMenu popupMenu = new PopupFlagCustomPageIndicatorMenu();
                                                     ^
  required: Context
  found:    no arguments
  reason: actual and formal argument lists differ in length
/home/lucas/tcc/reps/zaproxy/zap/src/test/java/org/zaproxy/zap/extension/custompages/PopupFlagCustomPageIndicatorMenuTest.java:36: error: cannot find symbol
        Component mockComponent = // Create mock component;
        ^
  symbol:   class Component
  location: class PopupFlagCustomPageIndicatorMenuTest
/home/lucas/tcc/reps/zaproxy/zap/src/test/java/org/zaproxy/zap/extension/custompages/PopupFlagCustomPageIndicatorMenuTest.java:42: error: constructor PopupFlagCustomPageIndicatorMenu in class PopupFlagCustomPageIndicatorMenu cannot be applied to given types;
        PopupFlagCustomPageIndicatorMenu popupMenu = new PopupFlagCustomPageIndicatorMenu();
                                                     ^
  required: Context
  found:    no arguments
  reason: actual and formal argument lists differ in length
7 errors

FAILURE: Build failed with an exception.

* What went wrong:
Execution failed for task ':zap:compileTestJava'.
> Compilation failed; see the compiler error output for details.

* Try:
> Run with --info option to get more log output.
> Run with --scan to get full insights.

BUILD FAILED in 1s


Instructions for correction:
1. Review the provided test suite written in Java, using JUnit 5.
2. Identify the cause of the error based on the error output.
3. Make sure all imports are done correctly and the package is declared correctly
4. If required, create mock objects or add missing dependencies to ensure the tests run correctly.
5. If some test cases in the suite fail, just remove them from the suite
6. Ensure that the test suite code avoids using wildcard imports (static or non-static).
7. Return only the corrected and updated test suite code.

Below is the code of test suite. When executing the test suite, the following error output occurred.

Test suite:

package org.zaproxy.zap.extension.custompages;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.*;
import org.junit.jupiter.api.Test;

class PopupFlagCustomPageIndicatorMenuTest {

    @Test
    void testPerformAction() {
        
    }

    @Test
    void testIsSubMenu() {
        Context context = new Context(); 
        PopupFlagCustomPageIndicatorMenu popupMenu = new PopupFlagCustomPageIndicatorMenu(context);
        assertThat(popupMenu.isSubMenu(), is(true));
    }

    @Test
    void testGetParentMenuName() {
        Context context = new Context(); 
        PopupFlagCustomPageIndicatorMenu popupMenu = new PopupFlagCustomPageIndicatorMenu(context);
        assertThat(popupMenu.getParentMenuName(), is("context.flag.popup"));
    }

    @Test
    void testGetParentWeight() {
        Context context = new Context(); 
        PopupFlagCustomPageIndicatorMenu popupMenu = new PopupFlagCustomPageIndicatorMenu(context);
        assertThat(popupMenu.getParentWeight(), is(MenuWeights.MENU_FLAG_CONTEXT_WEIGHT));
    }

    @Test
    void testIsEnableForComponent() {
        Context context = new Context(); 
        PopupFlagCustomPageIndicatorMenu popupMenu = new PopupFlagCustomPageIndicatorMenu(context);
        Component mockComponent = new Component(); 
        assertThat(popupMenu.isEnableForComponent(mockComponent), is(false)); 
    }

    @Test
    void testGetSelectedText() {
        Context context = new Context(); 
        PopupFlagCustomPageIndicatorMenu popupMenu = new PopupFlagCustomPageIndicatorMenu(context);
        
        assertThat(popupMenu.getSelectedText(), is(notNullValue()));
    }
}


Error output when running the test suite:
/home/lucas/tcc/reps/zaproxy/zap/src/test/java/org/zaproxy/zap/extension/custompages/PopupFlagCustomPageIndicatorMenuTest.java:17: error: cannot find symbol
        Context context = new Context(); // Create Context object
        ^
  symbol:   class Context
  location: class PopupFlagCustomPageIndicatorMenuTest
/home/lucas/tcc/reps/zaproxy/zap/src/test/java/org/zaproxy/zap/extension/custompages/PopupFlagCustomPageIndicatorMenuTest.java:17: error: cannot find symbol
        Context context = new Context(); // Create Context object
                              ^
  symbol:   class Context
  location: class PopupFlagCustomPageIndicatorMenuTest
/home/lucas/tcc/reps/zaproxy/zap/src/test/java/org/zaproxy/zap/extension/custompages/PopupFlagCustomPageIndicatorMenuTest.java:24: error: cannot find symbol
        Context context = new Context(); // Create Context object
        ^
  symbol:   class Context
  location: class PopupFlagCustomPageIndicatorMenuTest
/home/lucas/tcc/reps/zaproxy/zap/src/test/java/org/zaproxy/zap/extension/custompages/PopupFlagCustomPageIndicatorMenuTest.java:24: error: cannot find symbol
        Context context = new Context(); // Create Context object
                              ^
  symbol:   class Context
  location: class PopupFlagCustomPageIndicatorMenuTest
/home/lucas/tcc/reps/zaproxy/zap/src/test/java/org/zaproxy/zap/extension/custompages/PopupFlagCustomPageIndicatorMenuTest.java:31: error: cannot find symbol
        Context context = new Context(); // Create Context object
        ^
  symbol:   class Context
  location: class PopupFlagCustomPageIndicatorMenuTest
/home/lucas/tcc/reps/zaproxy/zap/src/test/java/org/zaproxy/zap/extension/custompages/PopupFlagCustomPageIndicatorMenuTest.java:31: error: cannot find symbol
        Context context = new Context(); // Create Context object
                              ^
  symbol:   class Context
  location: class PopupFlagCustomPageIndicatorMenuTest
/home/lucas/tcc/reps/zaproxy/zap/src/test/java/org/zaproxy/zap/extension/custompages/PopupFlagCustomPageIndicatorMenuTest.java:33: error: cannot find symbol
        assertThat(popupMenu.getParentWeight(), is(MenuWeights.MENU_FLAG_CONTEXT_WEIGHT));
                                                   ^
  symbol:   variable MenuWeights
  location: class PopupFlagCustomPageIndicatorMenuTest
/home/lucas/tcc/reps/zaproxy/zap/src/test/java/org/zaproxy/zap/extension/custompages/PopupFlagCustomPageIndicatorMenuTest.java:38: error: cannot find symbol
        Context context = new Context(); // Create Context object
        ^
  symbol:   class Context
  location: class PopupFlagCustomPageIndicatorMenuTest
/home/lucas/tcc/reps/zaproxy/zap/src/test/java/org/zaproxy/zap/extension/custompages/PopupFlagCustomPageIndicatorMenuTest.java:38: error: cannot find symbol
        Context context = new Context(); // Create Context object
                              ^
  symbol:   class Context
  location: class PopupFlagCustomPageIndicatorMenuTest
/home/lucas/tcc/reps/zaproxy/zap/src/test/java/org/zaproxy/zap/extension/custompages/PopupFlagCustomPageIndicatorMenuTest.java:40: error: cannot find symbol
        Component mockComponent = new Component(); // Create mock Component
        ^
  symbol:   class Component
  location: class PopupFlagCustomPageIndicatorMenuTest
/home/lucas/tcc/reps/zaproxy/zap/src/test/java/org/zaproxy/zap/extension/custompages/PopupFlagCustomPageIndicatorMenuTest.java:40: error: cannot find symbol
        Component mockComponent = new Component(); // Create mock Component
                                      ^
  symbol:   class Component
  location: class PopupFlagCustomPageIndicatorMenuTest
/home/lucas/tcc/reps/zaproxy/zap/src/test/java/org/zaproxy/zap/extension/custompages/PopupFlagCustomPageIndicatorMenuTest.java:46: error: cannot find symbol
        Context context = new Context(); // Create Context object
        ^
  symbol:   class Context
  location: class PopupFlagCustomPageIndicatorMenuTest
/home/lucas/tcc/reps/zaproxy/zap/src/test/java/org/zaproxy/zap/extension/custompages/PopupFlagCustomPageIndicatorMenuTest.java:46: error: cannot find symbol
        Context context = new Context(); // Create Context object
                              ^
  symbol:   class Context
  location: class PopupFlagCustomPageIndicatorMenuTest
13 errors

FAILURE: Build failed with an exception.

* What went wrong:
Execution failed for task ':zap:compileTestJava'.
> Compilation failed; see the compiler error output for details.

* Try:
> Run with --info option to get more log output.
> Run with --scan to get full insights.

BUILD FAILED in 1s


Instructions for correction:
1. Review the provided test suite written in Java, using JUnit 5.
2. Identify the cause of the error based on the error output.
3. Make sure all imports are done correctly and the package is declared correctly
4. If required, create mock objects or add missing dependencies to ensure the tests run correctly.
5. If some test cases in the suite fail, just remove them from the suite
6. Ensure that the test suite code avoids using wildcard imports (static or non-static).
7. Return only the corrected and updated test suite code.

Below is the code of test suite. When executing the test suite, the following error output occurred.

Test suite:

package org.zaproxy.zap.extension.custompages;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.*;
import org.junit.jupiter.api.Test;

class PopupFlagCustomPageIndicatorMenuTest {

    @Test
    void testIsSubMenu() {
        org.zaproxy.zap.extension.custompages.Context context = new org.zaproxy.zap.extension.custompages.Context();
        PopupFlagCustomPageIndicatorMenu popupMenu = new PopupFlagCustomPageIndicatorMenu(context);
        assertThat(popupMenu.isSubMenu(), is(true));
    }

    @Test
    void testGetParentMenuName() {
        org.zaproxy.zap.extension.custompages.Context context = new org.zaproxy.zap.extension.custompages.Context();
        PopupFlagCustomPageIndicatorMenu popupMenu = new PopupFlagCustomPageIndicatorMenu(context);
        assertThat(popupMenu.getParentMenuName(), is("context.flag.popup"));
    }

    @Test
    void testGetParentWeight() {
        org.zaproxy.zap.extension.custompages.Context context = new org.zaproxy.zap.extension.custompages.Context();
        PopupFlagCustomPageIndicatorMenu popupMenu = new PopupFlagCustomPageIndicatorMenu(context);
        assertThat(popupMenu.getParentWeight(), is(org.zaproxy.zap.extension.custompages.MenuWeights.MENU_FLAG_CONTEXT_WEIGHT));
    }

    @Test
    void testIsEnableForComponent() {
        org.zaproxy.zap.extension.custompages.Context context = new org.zaproxy.zap.extension.custompages.Context();
        PopupFlagCustomPageIndicatorMenu popupMenu = new PopupFlagCustomPageIndicatorMenu(context);
        org.zaproxy.zap.extension.custompages.Component mockComponent = new org.zaproxy.zap.extension.custompages.Component();
        assertThat(popupMenu.isEnableForComponent(mockComponent), is(false));
    }

    @Test
    void testGetSelectedText() {
        org.zaproxy.zap.extension.custompages.Context context = new org.zaproxy.zap.extension.custompages.Context();
        PopupFlagCustomPageIndicatorMenu popupMenu = new PopupFlagCustomPageIndicatorMenu(context);

        assertThat(popupMenu.getSelectedText(), is(notNullValue()));
    }
}


Error output when running the test suite:
/home/lucas/tcc/reps/zaproxy/zap/src/test/java/org/zaproxy/zap/extension/custompages/PopupFlagCustomPageIndicatorMenuTest.java:12: error: cannot find symbol
        org.zaproxy.zap.extension.custompages.Context context = new org.zaproxy.zap.extension.custompages.Context();
                                             ^
  symbol:   class Context
  location: package org.zaproxy.zap.extension.custompages
/home/lucas/tcc/reps/zaproxy/zap/src/test/java/org/zaproxy/zap/extension/custompages/PopupFlagCustomPageIndicatorMenuTest.java:12: error: cannot find symbol
        org.zaproxy.zap.extension.custompages.Context context = new org.zaproxy.zap.extension.custompages.Context();
                                                                                                         ^
  symbol:   class Context
  location: package org.zaproxy.zap.extension.custompages
/home/lucas/tcc/reps/zaproxy/zap/src/test/java/org/zaproxy/zap/extension/custompages/PopupFlagCustomPageIndicatorMenuTest.java:19: error: cannot find symbol
        org.zaproxy.zap.extension.custompages.Context context = new org.zaproxy.zap.extension.custompages.Context();
                                             ^
  symbol:   class Context
  location: package org.zaproxy.zap.extension.custompages
/home/lucas/tcc/reps/zaproxy/zap/src/test/java/org/zaproxy/zap/extension/custompages/PopupFlagCustomPageIndicatorMenuTest.java:19: error: cannot find symbol
        org.zaproxy.zap.extension.custompages.Context context = new org.zaproxy.zap.extension.custompages.Context();
                                                                                                         ^
  symbol:   class Context
  location: package org.zaproxy.zap.extension.custompages
/home/lucas/tcc/reps/zaproxy/zap/src/test/java/org/zaproxy/zap/extension/custompages/PopupFlagCustomPageIndicatorMenuTest.java:26: error: cannot find symbol
        org.zaproxy.zap.extension.custompages.Context context = new org.zaproxy.zap.extension.custompages.Context();
                                             ^
  symbol:   class Context
  location: package org.zaproxy.zap.extension.custompages
/home/lucas/tcc/reps/zaproxy/zap/src/test/java/org/zaproxy/zap/extension/custompages/PopupFlagCustomPageIndicatorMenuTest.java:26: error: cannot find symbol
        org.zaproxy.zap.extension.custompages.Context context = new org.zaproxy.zap.extension.custompages.Context();
                                                                                                         ^
  symbol:   class Context
  location: package org.zaproxy.zap.extension.custompages
/home/lucas/tcc/reps/zaproxy/zap/src/test/java/org/zaproxy/zap/extension/custompages/PopupFlagCustomPageIndicatorMenuTest.java:28: error: cannot find symbol
        assertThat(popupMenu.getParentWeight(), is(org.zaproxy.zap.extension.custompages.MenuWeights.MENU_FLAG_CONTEXT_WEIGHT));
                                                                                        ^
  symbol:   class MenuWeights
  location: package org.zaproxy.zap.extension.custompages
/home/lucas/tcc/reps/zaproxy/zap/src/test/java/org/zaproxy/zap/extension/custompages/PopupFlagCustomPageIndicatorMenuTest.java:33: error: cannot find symbol
        org.zaproxy.zap.extension.custompages.Context context = new org.zaproxy.zap.extension.custompages.Context();
                                             ^
  symbol:   class Context
  location: package org.zaproxy.zap.extension.custompages
/home/lucas/tcc/reps/zaproxy/zap/src/test/java/org/zaproxy/zap/extension/custompages/PopupFlagCustomPageIndicatorMenuTest.java:33: error: cannot find symbol
        org.zaproxy.zap.extension.custompages.Context context = new org.zaproxy.zap.extension.custompages.Context();
                                                                                                         ^
  symbol:   class Context
  location: package org.zaproxy.zap.extension.custompages
/home/lucas/tcc/reps/zaproxy/zap/src/test/java/org/zaproxy/zap/extension/custompages/PopupFlagCustomPageIndicatorMenuTest.java:35: error: cannot find symbol
        org.zaproxy.zap.extension.custompages.Component mockComponent = new org.zaproxy.zap.extension.custompages.Component();
                                             ^
  symbol:   class Component
  location: package org.zaproxy.zap.extension.custompages
/home/lucas/tcc/reps/zaproxy/zap/src/test/java/org/zaproxy/zap/extension/custompages/PopupFlagCustomPageIndicatorMenuTest.java:35: error: cannot find symbol
        org.zaproxy.zap.extension.custompages.Component mockComponent = new org.zaproxy.zap.extension.custompages.Component();
                                                                                                                 ^
  symbol:   class Component
  location: package org.zaproxy.zap.extension.custompages
/home/lucas/tcc/reps/zaproxy/zap/src/test/java/org/zaproxy/zap/extension/custompages/PopupFlagCustomPageIndicatorMenuTest.java:41: error: cannot find symbol
        org.zaproxy.zap.extension.custompages.Context context = new org.zaproxy.zap.extension.custompages.Context();
                                             ^
  symbol:   class Context
  location: package org.zaproxy.zap.extension.custompages
/home/lucas/tcc/reps/zaproxy/zap/src/test/java/org/zaproxy/zap/extension/custompages/PopupFlagCustomPageIndicatorMenuTest.java:41: error: cannot find symbol
        org.zaproxy.zap.extension.custompages.Context context = new org.zaproxy.zap.extension.custompages.Context();
                                                                                                         ^
  symbol:   class Context
  location: package org.zaproxy.zap.extension.custompages
13 errors

FAILURE: Build failed with an exception.

* What went wrong:
Execution failed for task ':zap:compileTestJava'.
> Compilation failed; see the compiler error output for details.

* Try:
> Run with --info option to get more log output.
> Run with --scan to get full insights.

BUILD FAILED in 1s


Instructions for correction:
1. Review the provided test suite written in Java, using JUnit 5.
2. Identify the cause of the error based on the error output.
3. Make sure all imports are done correctly and the package is declared correctly
4. If required, create mock objects or add missing dependencies to ensure the tests run correctly.
5. If some test cases in the suite fail, just remove them from the suite
6. Ensure that the test suite code avoids using wildcard imports (static or non-static).
7. Return only the corrected and updated test suite code.

Below is the code of test suite. When executing the test suite, the following error output occurred.

Test suite:

package org.zaproxy.zap.extension.custompages;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.*;
import org.junit.jupiter.api.Test;

class PopupFlagCustomPageIndicatorMenuTest {

    @Test
    void testIsSubMenu() {
        Context context = new Context();
        PopupFlagCustomPageIndicatorMenu popupMenu = new PopupFlagCustomPageIndicatorMenu(context);
        assertThat(popupMenu.isSubMenu(), is(true));
    }

    @Test
    void testGetParentMenuName() {
        Context context = new Context();
        PopupFlagCustomPageIndicatorMenu popupMenu = new PopupFlagCustomPageIndicatorMenu(context);
        assertThat(popupMenu.getParentMenuName(), is("context.flag.popup"));
    }

    @Test
    void testGetParentWeight() {
        Context context = new Context();
        PopupFlagCustomPageIndicatorMenu popupMenu = new PopupFlagCustomPageIndicatorMenu(context);
        assertThat(popupMenu.getParentWeight(), is(MenuWeights.MENU_FLAG_CONTEXT_WEIGHT));
    }

    @Test
    void testIsEnableForComponent() {
        Context context = new Context();
        PopupFlagCustomPageIndicatorMenu popupMenu = new PopupFlagCustomPageIndicatorMenu(context);
        Component mockComponent = new Component();
        assertThat(popupMenu.isEnableForComponent(mockComponent), is(false));
    }

    @Test
    void testGetSelectedText() {
        Context context = new Context();
        PopupFlagCustomPageIndicatorMenu popupMenu = new PopupFlagCustomPageIndicatorMenu(context);

        assertThat(popupMenu.getSelectedText(), is(notNullValue()));
    }
}


Error output when running the test suite:
/home/lucas/tcc/reps/zaproxy/zap/src/test/java/org/zaproxy/zap/extension/custompages/PopupFlagCustomPageIndicatorMenuTest.java:12: error: cannot find symbol
        Context context = new Context();
        ^
  symbol:   class Context
  location: class PopupFlagCustomPageIndicatorMenuTest
/home/lucas/tcc/reps/zaproxy/zap/src/test/java/org/zaproxy/zap/extension/custompages/PopupFlagCustomPageIndicatorMenuTest.java:12: error: cannot find symbol
        Context context = new Context();
                              ^
  symbol:   class Context
  location: class PopupFlagCustomPageIndicatorMenuTest
/home/lucas/tcc/reps/zaproxy/zap/src/test/java/org/zaproxy/zap/extension/custompages/PopupFlagCustomPageIndicatorMenuTest.java:19: error: cannot find symbol
        Context context = new Context();
        ^
  symbol:   class Context
  location: class PopupFlagCustomPageIndicatorMenuTest
/home/lucas/tcc/reps/zaproxy/zap/src/test/java/org/zaproxy/zap/extension/custompages/PopupFlagCustomPageIndicatorMenuTest.java:19: error: cannot find symbol
        Context context = new Context();
                              ^
  symbol:   class Context
  location: class PopupFlagCustomPageIndicatorMenuTest
/home/lucas/tcc/reps/zaproxy/zap/src/test/java/org/zaproxy/zap/extension/custompages/PopupFlagCustomPageIndicatorMenuTest.java:26: error: cannot find symbol
        Context context = new Context();
        ^
  symbol:   class Context
  location: class PopupFlagCustomPageIndicatorMenuTest
/home/lucas/tcc/reps/zaproxy/zap/src/test/java/org/zaproxy/zap/extension/custompages/PopupFlagCustomPageIndicatorMenuTest.java:26: error: cannot find symbol
        Context context = new Context();
                              ^
  symbol:   class Context
  location: class PopupFlagCustomPageIndicatorMenuTest
/home/lucas/tcc/reps/zaproxy/zap/src/test/java/org/zaproxy/zap/extension/custompages/PopupFlagCustomPageIndicatorMenuTest.java:28: error: cannot find symbol
        assertThat(popupMenu.getParentWeight(), is(MenuWeights.MENU_FLAG_CONTEXT_WEIGHT));
                                                   ^
  symbol:   variable MenuWeights
  location: class PopupFlagCustomPageIndicatorMenuTest
/home/lucas/tcc/reps/zaproxy/zap/src/test/java/org/zaproxy/zap/extension/custompages/PopupFlagCustomPageIndicatorMenuTest.java:33: error: cannot find symbol
        Context context = new Context();
        ^
  symbol:   class Context
  location: class PopupFlagCustomPageIndicatorMenuTest
/home/lucas/tcc/reps/zaproxy/zap/src/test/java/org/zaproxy/zap/extension/custompages/PopupFlagCustomPageIndicatorMenuTest.java:33: error: cannot find symbol
        Context context = new Context();
                              ^
  symbol:   class Context
  location: class PopupFlagCustomPageIndicatorMenuTest
/home/lucas/tcc/reps/zaproxy/zap/src/test/java/org/zaproxy/zap/extension/custompages/PopupFlagCustomPageIndicatorMenuTest.java:35: error: cannot find symbol
        Component mockComponent = new Component();
        ^
  symbol:   class Component
  location: class PopupFlagCustomPageIndicatorMenuTest
/home/lucas/tcc/reps/zaproxy/zap/src/test/java/org/zaproxy/zap/extension/custompages/PopupFlagCustomPageIndicatorMenuTest.java:35: error: cannot find symbol
        Component mockComponent = new Component();
                                      ^
  symbol:   class Component
  location: class PopupFlagCustomPageIndicatorMenuTest
/home/lucas/tcc/reps/zaproxy/zap/src/test/java/org/zaproxy/zap/extension/custompages/PopupFlagCustomPageIndicatorMenuTest.java:41: error: cannot find symbol
        Context context = new Context();
        ^
  symbol:   class Context
  location: class PopupFlagCustomPageIndicatorMenuTest
/home/lucas/tcc/reps/zaproxy/zap/src/test/java/org/zaproxy/zap/extension/custompages/PopupFlagCustomPageIndicatorMenuTest.java:41: error: cannot find symbol
        Context context = new Context();
                              ^
  symbol:   class Context
  location: class PopupFlagCustomPageIndicatorMenuTest
13 errors

FAILURE: Build failed with an exception.

* What went wrong:
Execution failed for task ':zap:compileTestJava'.
> Compilation failed; see the compiler error output for details.

* Try:
> Run with --info option to get more log output.
> Run with --scan to get full insights.

BUILD FAILED in 1s


Generate unit test cases for the following method(s) in JUnit 5:

- Method name(s): addExtension, destroyAllExtension, getExtension, getExtensionByClassName, isExtensionEnabled, getExtensionCount, addProxyServer, hookProxies, removeProxyServer, unhookProxies, hookProxyListener, hookOverrideMessageProxyListener, hookConnectRequestProxyListeners, hookPersistentConnectionListener, hookSiteMapListener, removeSiteMapListener, hasView, hookScannerHook, optionsChangedAllPlugin, runCommandLine, sessionChangedAllPlugin, databaseOpen, sessionAboutToChangeAllPlugin, sessionScopeChangedAllPlugin, sessionModeChangedAllPlugin, sessionPropertiesChangedAllPlugin, addonFilesAdded, addonFilesRemoved, addOnStatusUpdate, addOnInstalled, addOnSoftUninstalled, addOnUninstalled, startAllExtension, startLifeCycle, setExtensionAdaptorView, stopAllExtension, hookAllExtension, logExtensionInitError, hookContextDataFactories, hookApiImplementors, hookHttpSenderListeners, hookVariant, hookHrefTypeInfo, hookCommandLineListener, hookMenu, addMenuHelper, removeMenu, removeMenuHelper, hookOptions, unloadOptions, hookView, removeView, removeStatusPanel, removeOptionsPanel, removeOptionsParamSet, removeWorkPanel, removePopupMenuItem, removeFileMenuItem, removeEditMenuItem, removeViewMenuItem, removeToolsMenuItem, removeHelpMenuItem, removeReportMenuItem, initAllExtension, initModelAllExtension, initViewAllExtension, initXMLAllExtension, removeExtension, unhook, removeViewInEDT, getUnsavedResources, collectMessages, getActiveActions
- Class name: ExtensionLoader
- Class path: /home/lucas/tcc/reps/zaproxy/zap/src/main/java/org/parosproxy/paros/extension/ExtensionLoader.java
- The class is written in Java.
- Create the unit tests using the following libraries: org.hamcrest and org.junit.jupiter.api.Test.

Follow these instructions carefully:
1. The test class name should be ExtensionLoaderUnitTest.
2. If necessary, create mock objects.
3. Implement the test logic for each method, including setup, execution, and verification of results.
4. Use assertions to verify that the method behaves as expected.
5. Include the correct package declaration at the top of the file.
6. Ensure that all necessary imports for classes used in the tests are included.
7. Each test case should be clearly named and include specific logic to test different scenarios and edge cases.
8. Avoid generating test methods with placeholder comments. 
9. Make sure each test has assertion.

Make sure the tests are complete and avoid compile errors.

Class Code:





















































































package org.parosproxy.paros.extension;

import java.awt.Component;
import java.awt.EventQueue;
import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.stream.Collectors;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import org.apache.commons.lang3.exception.ExceptionUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.parosproxy.paros.CommandLine;
import org.parosproxy.paros.common.AbstractParam;
import org.parosproxy.paros.control.Control.Mode;
import org.parosproxy.paros.core.proxy.ConnectRequestProxyListener;
import org.parosproxy.paros.core.proxy.OverrideMessageProxyListener;
import org.parosproxy.paros.core.proxy.ProxyListener;
import org.parosproxy.paros.core.scanner.Scanner;
import org.parosproxy.paros.core.scanner.ScannerHook;
import org.parosproxy.paros.core.scanner.Variant;
import org.parosproxy.paros.db.Database;
import org.parosproxy.paros.db.DatabaseException;
import org.parosproxy.paros.db.DatabaseUnsupportedException;
import org.parosproxy.paros.model.Model;
import org.parosproxy.paros.model.OptionsParam;
import org.parosproxy.paros.model.Session;
import org.parosproxy.paros.network.HttpSender;
import org.parosproxy.paros.view.AbstractParamDialog;
import org.parosproxy.paros.view.AbstractParamPanel;
import org.parosproxy.paros.view.MainMenuBar;
import org.parosproxy.paros.view.SiteMapPanel;
import org.parosproxy.paros.view.View;
import org.parosproxy.paros.view.WorkbenchPanel;
import org.zaproxy.zap.PersistentConnectionListener;
import org.zaproxy.zap.control.AddOn;
import org.zaproxy.zap.extension.AddOnInstallationStatusListener;
import org.zaproxy.zap.extension.AddonFilesChangedListener;
import org.zaproxy.zap.extension.api.API;
import org.zaproxy.zap.extension.api.ApiImplementor;
import org.zaproxy.zap.extension.httppanel.DisplayedMessageChangedListener;
import org.zaproxy.zap.model.ContextDataFactory;
import org.zaproxy.zap.network.HttpSenderListener;
import org.zaproxy.zap.view.ContextPanelFactory;
import org.zaproxy.zap.view.HrefTypeInfo;
import org.zaproxy.zap.view.MainToolbarPanel;
import org.zaproxy.zap.view.SiteMapListener;

public class ExtensionLoader {

    private final List<Extension> extensionList = new ArrayList<>();
    private final Map<Class<? extends Extension>, Extension> extensionsMap = new HashMap<>();
    private final Map<Extension, ExtensionHook> extensionHooks = new HashMap<>();
    private Model model = null;

    private View view = null;
    private CommandLine cmdLine;
    private static final Logger LOGGER = LogManager.getLogger(ExtensionLoader.class);

    @SuppressWarnings("deprecation")
    private List<org.parosproxy.paros.core.proxy.ProxyServer> proxyServers;

    public ExtensionLoader(Model model, View view) {
        this.model = model;
        this.view = view;

        this.proxyServers = new ArrayList<>();
    }

    public void addExtension(Extension extension) {
        extensionList.add(extension);
        extensionsMap.put(extension.getClass(), extension);
    }

    public void destroyAllExtension() {
        for (int i = 0; i < getExtensionCount(); i++) {
            try {
                getExtension(i).destroy();

            } catch (Exception e) {
                LOGGER.error(e.getMessage(), e);
            }
        }
    }

    public Extension getExtension(int i) {
        return extensionList.get(i);
    }

    
    public Extension getExtension(String name) {
        if (name != null) {
            for (int i = 0; i < extensionList.size(); i++) {
                Extension p = getExtension(i);
                if (p.getName().equalsIgnoreCase(name)) {
                    return p;
                }
            }
        }

        return null;
    }

    public Extension getExtensionByClassName(String name) {
        if (name != null) {
            for (int i = 0; i < extensionList.size(); i++) {
                Extension p = getExtension(i);
                if (p.getClass().getName().equals(name)) {
                    return p;
                }
            }
        }

        return null;
    }

    
    public <T extends Extension> T getExtension(Class<T> clazz) {
        if (clazz != null) {
            Extension extension = extensionsMap.get(clazz);
            if (extension != null) {
                return clazz.cast(extension);
            }
        }
        return null;
    }

    
    public boolean isExtensionEnabled(String extensionName) {
        if (extensionName == null) {
            throw new IllegalArgumentException("Parameter extensionName must not be null.");
        }

        Extension extension = getExtension(extensionName);
        if (extension == null) {
            return false;
        }

        return extension.isEnabled();
    }

    public int getExtensionCount() {
        return extensionList.size();
    }

    
    @Deprecated(since = "2.13.0", forRemoval = true)
    public void addProxyServer(org.parosproxy.paros.core.proxy.ProxyServer proxyServer) {
        proxyServers.add(proxyServer);
        extensionHooks.values().forEach(extHook -> hookProxyServer(extHook, proxyServer));
    }

    @SuppressWarnings("deprecation")
    private static void hookProxyServer(
            ExtensionHook extHook, org.parosproxy.paros.core.proxy.ProxyServer proxyServer) {
        process(extHook.getProxyListenerList(), proxyServer::addProxyListener);
        process(
                extHook.getOverrideMessageProxyListenerList(),
                proxyServer::addOverrideMessageProxyListener);
        process(
                extHook.getPersistentConnectionListener(),
                proxyServer::addPersistentConnectionListener);
        process(
                extHook.getConnectRequestProxyListeners(),
                proxyServer::addConnectRequestProxyListener);
    }

    private static <T> void process(List<T> elements, Consumer<T> action) {
        try {
            elements.stream().filter(Objects::nonNull).forEach(action);
        } catch (Exception e) {
            LOGGER.error(e.getMessage(), e);
        }
    }

    @SuppressWarnings("deprecation")
    private void hookProxies(ExtensionHook extHook) {
        for (org.parosproxy.paros.core.proxy.ProxyServer proxyServer : proxyServers) {
            hookProxyServer(extHook, proxyServer);
        }
    }

    
    @Deprecated(since = "2.13.0", forRemoval = true)
    public void removeProxyServer(org.parosproxy.paros.core.proxy.ProxyServer proxyServer) {
        proxyServers.remove(proxyServer);
        extensionHooks.values().forEach(extHook -> unhookProxyServer(extHook, proxyServer));
    }

    @SuppressWarnings("deprecation")
    private void unhookProxyServer(
            ExtensionHook extHook, org.parosproxy.paros.core.proxy.ProxyServer proxyServer) {
        process(extHook.getProxyListenerList(), proxyServer::removeProxyListener);
        process(
                extHook.getOverrideMessageProxyListenerList(),
                proxyServer::removeOverrideMessageProxyListener);
        process(
                extHook.getPersistentConnectionListener(),
                proxyServer::removePersistentConnectionListener);
        process(
                extHook.getConnectRequestProxyListeners(),
                proxyServer::removeConnectRequestProxyListener);
    }

    @SuppressWarnings("deprecation")
    private void unhookProxies(ExtensionHook extHook) {
        for (org.parosproxy.paros.core.proxy.ProxyServer proxyServer : proxyServers) {
            unhookProxyServer(extHook, proxyServer);
        }
    }

    
    @Deprecated(since = "2.13.0", forRemoval = true)
    public void hookProxyListener(org.parosproxy.paros.control.Proxy proxy) {
        for (ExtensionHook hook : extensionHooks.values()) {
            hookProxyListeners(proxy, hook.getProxyListenerList());
        }
    }

    @SuppressWarnings("deprecation")
    private static void hookProxyListeners(
            org.parosproxy.paros.control.Proxy proxy, List<ProxyListener> listeners) {
        for (ProxyListener listener : listeners) {
            try {
                if (listener != null) {
                    proxy.addProxyListener(listener);
                }
            } catch (Exception e) {
                LOGGER.error(e.getMessage(), e);
            }
        }
    }

    
    @Deprecated(since = "2.13.0", forRemoval = true)
    public void hookOverrideMessageProxyListener(org.parosproxy.paros.control.Proxy proxy) {
        for (ExtensionHook hook : extensionHooks.values()) {
            hookOverrideMessageProxyListeners(proxy, hook.getOverrideMessageProxyListenerList());
        }
    }

    @SuppressWarnings("deprecation")
    private static void hookOverrideMessageProxyListeners(
            org.parosproxy.paros.control.Proxy proxy,
            List<OverrideMessageProxyListener> listeners) {
        for (OverrideMessageProxyListener listener : listeners) {
            try {
                if (listener != null) {
                    proxy.addOverrideMessageProxyListener(listener);
                }
            } catch (Exception e) {
                LOGGER.error(e.getMessage(), e);
            }
        }
    }

    
    @Deprecated(since = "2.13.0", forRemoval = true)
    public void hookConnectRequestProxyListeners(org.parosproxy.paros.control.Proxy proxy) {
        for (ExtensionHook hook : extensionHooks.values()) {
            hookConnectRequestProxyListeners(proxy, hook.getConnectRequestProxyListeners());
        }
    }

    @SuppressWarnings("deprecation")
    private static void hookConnectRequestProxyListeners(
            org.parosproxy.paros.control.Proxy proxy, List<ConnectRequestProxyListener> listeners) {
        for (ConnectRequestProxyListener listener : listeners) {
            proxy.addConnectRequestProxyListener(listener);
        }
    }

    
    @Deprecated(since = "2.13.0", forRemoval = true)
    public void hookPersistentConnectionListener(org.parosproxy.paros.control.Proxy proxy) {
        for (ExtensionHook hook : extensionHooks.values()) {
            hookPersistentConnectionListeners(proxy, hook.getPersistentConnectionListener());
        }
    }

    @SuppressWarnings("deprecation")
    private static void hookPersistentConnectionListeners(
            org.parosproxy.paros.control.Proxy proxy,
            List<PersistentConnectionListener> listeners) {
        for (PersistentConnectionListener listener : listeners) {
            try {
                if (listener != null) {
                    proxy.addPersistentConnectionListener(listener);
                }
            } catch (Exception e) {
                LOGGER.error(e.getMessage(), e);
            }
        }
    }

    
    public void hookSiteMapListener(SiteMapPanel siteMapPanel) {
        for (ExtensionHook hook : extensionHooks.values()) {
            hookSiteMapListeners(siteMapPanel, hook.getSiteMapListenerList());
        }
    }

    private static void hookSiteMapListeners(
            SiteMapPanel siteMapPanel, List<SiteMapListener> listeners) {
        for (SiteMapListener listener : listeners) {
            try {
                if (listener != null) {
                    siteMapPanel.addSiteMapListener(listener);
                }
            } catch (Exception e) {
                
                LOGGER.error(e.getMessage(), e);
            }
        }
    }

    private void removeSiteMapListener(ExtensionHook hook) {
        if (!hasView()) {
            return;
        }

        SiteMapPanel siteMapPanel = view.getSiteTreePanel();
        List<SiteMapListener> listenerList = hook.getSiteMapListenerList();
        for (SiteMapListener listener : listenerList) {
            try {
                if (listener != null) {
                    siteMapPanel.removeSiteMapListener(listener);
                }

            } catch (Exception e) {
                LOGGER.error(e.getMessage(), e);
            }
        }
    }

    private boolean hasView() {
        return view != null;
    }

    
    public void hookScannerHook(Scanner scan) {
        Iterator<ExtensionHook> iter = extensionHooks.values().iterator();
        while (iter.hasNext()) {
            ExtensionHook hook = iter.next();
            if (hook == null) {
                continue;
            }
            List<ScannerHook> scannerHookList = hook.getScannerHookList();

            for (ScannerHook scannerHook : scannerHookList) {
                try {
                    scan.addScannerHook(scannerHook);

                } catch (Exception e) {
                    LOGGER.error(e.getMessage(), e);
                }
            }
        }
    }

    public void optionsChangedAllPlugin(OptionsParam options) {
        for (ExtensionHook hook : extensionHooks.values()) {
            List<OptionsChangedListener> listenerList = hook.getOptionsChangedListenerList();
            for (OptionsChangedListener listener : listenerList) {
                try {
                    if (listener != null) {
                        listener.optionsChanged(options);
                    }

                } catch (Exception e) {
                    LOGGER.error(e.getMessage(), e);
                }
            }
        }
    }

    public void runCommandLine() {
        Extension ext;
        for (int i = 0; i < getExtensionCount(); i++) {
            ext = getExtension(i);
            if (ext instanceof CommandLineListener) {
                CommandLineListener listener = (CommandLineListener) ext;
                listener.preExecute(extensionHooks.get(ext).getCommandLineArgument());
            }
        }
        for (int i = 0; i < getExtensionCount(); i++) {
            ext = getExtension(i);
            if (ext instanceof CommandLineListener) {
                CommandLineListener listener = (CommandLineListener) ext;
                listener.execute(extensionHooks.get(ext).getCommandLineArgument());
            }
        }
    }

    public void sessionChangedAllPlugin(Session session) {
        LOGGER.debug("sessionChangedAllPlugin");
        for (ExtensionHook hook : extensionHooks.values()) {
            List<SessionChangedListener> listenerList = hook.getSessionListenerList();
            for (SessionChangedListener listener : listenerList) {
                try {
                    if (listener != null) {
                        listener.sessionChanged(session);
                    }

                } catch (Exception e) {
                    LOGGER.error(e.getMessage(), e);
                }
            }
        }
    }

    public void databaseOpen(Database db) {
        Extension ext;
        for (int i = 0; i < getExtensionCount(); i++) {
            ext = getExtension(i);
            try {
                ext.databaseOpen(db);
            } catch (Exception e) {
                LOGGER.error(e.getMessage(), e);
            }
        }
    }

    public void sessionAboutToChangeAllPlugin(Session session) {
        LOGGER.debug("sessionAboutToChangeAllPlugin");
        for (ExtensionHook hook : extensionHooks.values()) {
            List<SessionChangedListener> listenerList = hook.getSessionListenerList();
            for (SessionChangedListener listener : listenerList) {
                try {
                    if (listener != null) {
                        listener.sessionAboutToChange(session);
                    }

                } catch (Exception e) {
                    LOGGER.error(e.getMessage(), e);
                }
            }
        }
    }

    public void sessionScopeChangedAllPlugin(Session session) {
        LOGGER.debug("sessionScopeChangedAllPlugin");
        for (ExtensionHook hook : extensionHooks.values()) {
            List<SessionChangedListener> listenerList = hook.getSessionListenerList();
            for (SessionChangedListener listener : listenerList) {
                try {
                    if (listener != null) {
                        listener.sessionScopeChanged(session);
                    }

                } catch (Exception e) {
                    LOGGER.error(e.getMessage(), e);
                }
            }
        }
    }

    public void sessionModeChangedAllPlugin(Mode mode) {
        LOGGER.debug("sessionModeChangedAllPlugin");
        for (ExtensionHook hook : extensionHooks.values()) {
            List<SessionChangedListener> listenerList = hook.getSessionListenerList();
            for (SessionChangedListener listener : listenerList) {
                try {
                    if (listener != null) {
                        listener.sessionModeChanged(mode);
                    }

                } catch (Exception e) {
                    LOGGER.error(e.getMessage(), e);
                }
            }
        }
    }

    
    public void sessionPropertiesChangedAllPlugin(Session session) {
        LOGGER.debug("sessionPropertiesChangedAllPlugin");
        for (ExtensionHook hook : extensionHooks.values()) {
            for (SessionChangedListener listener : hook.getSessionListenerList()) {
                try {
                    if (listener != null) {
                        listener.sessionPropertiesChanged(session);
                    }

                } catch (Exception e) {
                    LOGGER.error(e.getMessage(), e);
                }
            }
        }
    }

    public void addonFilesAdded() {
        for (ExtensionHook hook : extensionHooks.values()) {
            List<AddonFilesChangedListener> listenerList = hook.getAddonFilesChangedListener();
            for (AddonFilesChangedListener listener : listenerList) {
                try {
                    listener.filesAdded();

                } catch (Exception e) {
                    LOGGER.error(e.getMessage(), e);
                }
            }
        }
    }

    public void addonFilesRemoved() {
        for (ExtensionHook hook : extensionHooks.values()) {
            List<AddonFilesChangedListener> listenerList = hook.getAddonFilesChangedListener();
            for (AddonFilesChangedListener listener : listenerList) {
                try {
                    listener.filesRemoved();

                } catch (Exception e) {
                    LOGGER.error(e.getMessage(), e);
                }
            }
        }
    }

    
    public void addOnStatusUpdate(AddOnInstallationStatusListener.StatusUpdate statusUpdate) {
        for (ExtensionHook hook : extensionHooks.values()) {
            for (AddOnInstallationStatusListener listener :
                    hook.getAddOnInstallationStatusListeners()) {
                try {
                    listener.update(statusUpdate);
                } catch (Exception e) {
                    LOGGER.error(
                            "An error occurred while notifying: {}",
                            listener.getClass().getCanonicalName(),
                            e);
                }
            }
        }
    }

    
    @SuppressWarnings("removal")
    @Deprecated(since = "2.15.0", forRemoval = true)
    public void addOnInstalled(AddOn addOn) {
        for (ExtensionHook hook : extensionHooks.values()) {
            for (AddOnInstallationStatusListener listener :
                    hook.getAddOnInstallationStatusListeners()) {
                try {
                    listener.addOnInstalled(addOn);
                } catch (Exception e) {
                    LOGGER.error(
                            "An error occurred while notifying: {}",
                            listener.getClass().getCanonicalName(),
                            e);
                }
            }
        }
    }

    
    @SuppressWarnings("removal")
    @Deprecated(since = "2.15.0", forRemoval = true)
    public void addOnSoftUninstalled(AddOn addOn, boolean successfully) {
        for (ExtensionHook hook : extensionHooks.values()) {
            for (AddOnInstallationStatusListener listener :
                    hook.getAddOnInstallationStatusListeners()) {
                try {
                    listener.addOnSoftUninstalled(addOn, successfully);
                } catch (Exception e) {
                    LOGGER.error(
                            "An error occurred while notifying: {}",
                            listener.getClass().getCanonicalName(),
                            e);
                }
            }
        }
    }

    
    @SuppressWarnings("removal")
    @Deprecated(since = "2.15.0", forRemoval = true)
    public void addOnUninstalled(AddOn addOn, boolean successfully) {
        for (ExtensionHook hook : extensionHooks.values()) {
            for (AddOnInstallationStatusListener listener :
                    hook.getAddOnInstallationStatusListeners()) {
                try {
                    listener.addOnUninstalled(addOn, successfully);
                } catch (Exception e) {
                    LOGGER.error(
                            "An error occurred while notifying: {}",
                            listener.getClass().getCanonicalName(),
                            e);
                }
            }
        }
    }

    public void startAllExtension(double progressFactor) {
        double factorPerc = progressFactor / getExtensionCount();

        for (int i = 0; i < getExtensionCount(); i++) {
            Extension extension = getExtension(i);
            try {
                extension.start();
                if (hasView()) {
                    view.addSplashScreenLoadingCompletion(factorPerc);
                }

            } catch (Exception e) {
                logExtensionInitError(extension, e);
            }
        }
    }

    
    public void startLifeCycle() {

        
        if (hasView()) {
            view.setSplashScreenLoadingCompletion(0.0);
        }

        
        initAllExtension(5.0);
        
        initModelAllExtension(model, 0.0);
        
        initXMLAllExtension(model.getSession(), model.getOptionsParam(), 0.0);
        
        initViewAllExtension(view, 10.0);
        
        hookAllExtension(75.0);
        
        startAllExtension(10.0);

        
        this.cmdLine = null;
    }

    
    public void startLifeCycle(Extension ext)
            throws DatabaseException, DatabaseUnsupportedException {
        setExtensionAdaptorView(ext);

        ext.init();
        ext.databaseOpen(model.getDb());
        ext.initModel(model);
        ext.initXML(model.getSession(), model.getOptionsParam());

        if (hasView()) {
            ext.initView(view);
        }

        ExtensionHook extHook = new ExtensionHook(model, view);
        extensionHooks.put(ext, extHook);
        try {
            ext.hook(extHook);

            if (cmdLine != null) {
                
                
                CommandLineArgument[] arg = extHook.getCommandLineArgument();

                if (arg.length > 0 && ext instanceof CommandLineListener) {
                    List<CommandLineArgument[]> allCommandLineList = new ArrayList<>();
                    Map<String, CommandLineListener> extMap = new HashMap<>();
                    allCommandLineList.add(arg);

                    CommandLineListener cli = (CommandLineListener) ext;
                    List<String> extensions = cli.getHandledExtensions();
                    if (extensions != null) {
                        for (String extension : extensions) {
                            extMap.put(extension, cli);
                        }
                    }
                    cmdLine.resetArgs();
                    cmdLine.parse(allCommandLineList, extMap, false);
                }
            }

            hookContextDataFactories(ext, extHook);
            hookApiImplementors(ext, extHook);
            hookHttpSenderListeners(ext, extHook);
            hookVariant(ext, extHook);
            hookHrefTypeInfo(ext, extHook);

            if (hasView()) {
                
                hookView(ext, view, extHook);
                hookMenu(view, extHook);
            }

            hookOptions(extHook);
            hookProxies(extHook);
            ext.optionsLoaded();
            ext.postInit();
        } catch (Exception e) {
            logExtensionInitError(ext, e);
        }

        ext.start();

        if (hasView()) {
            hookSiteMapListeners(view.getSiteTreePanel(), extHook.getSiteMapListenerList());
        }
    }

    private void setExtensionAdaptorView(Extension extension) {
        if (hasView() && extension instanceof ExtensionAdaptor) {
            ((ExtensionAdaptor) extension).setView(view);
        }
    }

    public void stopAllExtension() {
        for (int i = 0; i < getExtensionCount(); i++) {
            try {
                getExtension(i).stop();

            } catch (Exception e) {
                LOGGER.error(e.getMessage(), e);
            }
        }
    }

    
    private void addParamPanel(
            List<ExtensionHookView.AbstractParamPanelEntry> panelList, AbstractParamDialog dialog) {
        for (ExtensionHookView.AbstractParamPanelEntry entry : panelList) {
            try {
                dialog.addParamPanel(entry.getParents(), entry.getPanel(), true);

            } catch (Exception e) {
                LOGGER.error(e.getMessage(), e);
            }
        }
    }

    private void removeParamPanel(
            List<ExtensionHookView.AbstractParamPanelEntry> panelList, AbstractParamDialog dialog) {
        for (ExtensionHookView.AbstractParamPanelEntry entry : panelList) {
            try {
                dialog.removeParamPanel(entry.getPanel());

            } catch (Exception e) {
                LOGGER.error(e.getMessage(), e);
            }
        }
        dialog.revalidate();
    }

    private void hookAllExtension(double progressFactor) {
        final double factorPerc = progressFactor / getExtensionCount();

        for (int i = 0; i < getExtensionCount(); i++) {
            final Extension ext = getExtension(i);
            try {
                LOGGER.info("Initializing {} - {}", ext.getUIName(), ext.getDescription());
                final ExtensionHook extHook = new ExtensionHook(model, view);
                extensionHooks.put(ext, extHook);
                ext.hook(extHook);

                hookContextDataFactories(ext, extHook);
                hookApiImplementors(ext, extHook);
                hookHttpSenderListeners(ext, extHook);
                hookVariant(ext, extHook);
                hookHrefTypeInfo(ext, extHook);

                if (hasView()) {
                    EventQueue.invokeAndWait(
                            () -> {
                                
                                hookView(ext, view, extHook);
                                hookMenu(view, extHook);
                                view.addSplashScreenLoadingCompletion(factorPerc);
                            });
                }

                hookOptions(extHook);
                hookProxies(extHook);
                ext.optionsLoaded();

            } catch (Throwable e) {
                
                logExtensionInitError(ext, e);
            }
        }
        
        for (int i = 0; i < getExtensionCount(); i++) {
            Extension extension = getExtension(i);
            try {
                extension.postInit();
            } catch (Throwable e) {
                
                logExtensionInitError(extension, e);
            }
        }

        if (hasView()) {
            try {
                EventQueue.invokeAndWait(
                        () -> {
                            view.getMainFrame().getMainMenuBar().validate();
                            view.getMainFrame().validate();
                        });
            } catch (InvocationTargetException | InterruptedException e) {
                LOGGER.warn("An error occurred while updating the UI:", e);
            }
        }
    }

    private static void logExtensionInitError(Extension extension, Throwable e) {
        StringBuilder strBuilder = new StringBuilder(150);
        strBuilder.append("Failed to initialise extension ");
        strBuilder.append(extension.getClass().getCanonicalName());
        AddOn addOn = extension.getAddOn();
        if (addOn != null) {
            strBuilder.append(" (from add-on ").append(addOn).append(')');
        }
        strBuilder.append(", cause: ");
        strBuilder.append(ExceptionUtils.getRootCauseMessage(e));
        LOGGER.error(strBuilder, e);
    }

    private void hookContextDataFactories(Extension extension, ExtensionHook extHook) {
        for (ContextDataFactory contextDataFactory : extHook.getContextDataFactories()) {
            try {
                model.addContextDataFactory(contextDataFactory);
            } catch (Exception e) {
                LOGGER.error(
                        "Error while adding a ContextDataFactory from {}",
                        extension.getClass().getCanonicalName(),
                        e);
            }
        }
    }

    private void hookApiImplementors(Extension extension, ExtensionHook extHook) {
        for (ApiImplementor apiImplementor : extHook.getApiImplementors()) {
            try {
                API.getInstance().registerApiImplementor(apiImplementor);
            } catch (Exception e) {
                LOGGER.error(
                        "Error while adding an ApiImplementor from {}",
                        extension.getClass().getCanonicalName(),
                        e);
            }
        }
    }

    private void hookHttpSenderListeners(Extension extension, ExtensionHook extHook) {
        for (HttpSenderListener httpSenderListener : extHook.getHttpSenderListeners()) {
            try {
                HttpSender.addListener(httpSenderListener);
            } catch (Exception e) {
                LOGGER.error(
                        "Error while adding an HttpSenderListener from {}",
                        extension.getClass().getCanonicalName(),
                        e);
            }
        }
    }

    private void hookVariant(Extension extension, ExtensionHook extHook) {
        for (Class<? extends Variant> variant : extHook.getVariants()) {
            try {
                
                variant.getDeclaredConstructor().newInstance();
                Model.getSingleton().getVariantFactory().addVariant(variant);
            } catch (Exception e) {
                LOGGER.error(
                        "Error while adding a Variant from {}",
                        extension.getClass().getCanonicalName(),
                        e);
            }
        }
    }

    private void hookHrefTypeInfo(Extension extension, ExtensionHook extHook) {
        for (HrefTypeInfo hrefTypeInfo : extHook.getHrefsTypeInfo()) {
            try {
                HrefTypeInfo.addType(hrefTypeInfo);
            } catch (Exception e) {
                LOGGER.error(
                        "Error while adding a HrefTypeInfo from {}",
                        extension.getClass().getCanonicalName(),
                        e);
            }
        }
    }

    
    public void hookCommandLineListener(CommandLine cmdLine) throws Exception {
        
        this.cmdLine = cmdLine;
        List<CommandLineArgument[]> allCommandLineList = new ArrayList<>();
        Map<String, CommandLineListener> extMap = new HashMap<>();
        for (Map.Entry<Extension, ExtensionHook> entry : extensionHooks.entrySet()) {
            ExtensionHook hook = entry.getValue();
            CommandLineArgument[] arg = hook.getCommandLineArgument();
            if (arg.length > 0) {
                allCommandLineList.add(arg);
            }

            Extension extension = entry.getKey();
            if (extension instanceof CommandLineListener) {
                CommandLineListener cli = (CommandLineListener) extension;
                List<String> exts = cli.getHandledExtensions();
                if (exts != null) {
                    for (String ext : exts) {
                        extMap.put(ext, cli);
                    }
                }
            }
        }

        cmdLine.parse(allCommandLineList, extMap);
    }

    private void hookMenu(View view, ExtensionHook hook) {
        if (!hasView()) {
            return;
        }

        ExtensionHookMenu hookMenu = hook.getHookMenuNoInit();
        if (hookMenu == null) {
            return;
        }

        MainMenuBar menuBar = view.getMainFrame().getMainMenuBar();

        
        addMenuHelper(menuBar, hookMenu.getNewMenus(), 2);

        addMenuHelper(menuBar.getMenuFile(), hookMenu.getFile(), 2);
        addMenuHelper(menuBar.getMenuTools(), hookMenu.getTools(), 2);
        addMenuHelper(menuBar.getMenuEdit(), hookMenu.getEdit());
        addMenuHelper(menuBar.getMenuView(), hookMenu.getView());
        addMenuHelper(menuBar.getMenuAnalyse(), hookMenu.getAnalyse());
        addMenuHelper(menuBar.getMenuHelp(), hookMenu.getHelpMenus());
        addMenuHelper(menuBar.getMenuReport(), hookMenu.getReportMenus());
        addMenuHelper(menuBar.getMenuOnline(), hookMenu.getOnlineMenus());
        addMenuHelper(menuBar.getMenuImport(), hookMenu.getImport());

        addMenuHelper(view.getPopupList(), hookMenu.getPopupMenus());
    }

    private void addMenuHelper(JMenu menu, List<JMenuItem> items) {
        addMenuHelper(menu, items, 0);
    }

    private void addMenuHelper(JMenuBar menuBar, List<JMenuItem> items, int existingCount) {
        for (JMenuItem item : items) {
            if (item != null) {
                menuBar.add(item, menuBar.getMenuCount() - existingCount);
            }
        }
        menuBar.revalidate();
    }

    private void addMenuHelper(JMenu menu, List<JMenuItem> items, int existingCount) {
        for (JMenuItem item : items) {
            if (item != null) {
                if (item == ExtensionHookMenu.MENU_SEPARATOR) {
                    menu.addSeparator();
                    continue;
                }

                menu.add(item, menu.getItemCount() - existingCount);
            }
        }

        menu.revalidate();
    }

    private void addMenuHelper(List<JMenuItem> menuList, List<JMenuItem> items) {
        for (JMenuItem item : items) {
            if (item != null) {
                menuList.add(item);
            }
        }
    }

    private void removeMenu(View view, ExtensionHook hook) {
        if (!hasView()) {
            return;
        }

        ExtensionHookMenu hookMenu = hook.getHookMenuNoInit();
        if (hookMenu == null) {
            return;
        }

        MainMenuBar menuBar = view.getMainFrame().getMainMenuBar();

        
        removeMenuHelper(menuBar, hookMenu.getNewMenus());

        removeMenuHelper(menuBar.getMenuFile(), hookMenu.getFile());
        removeMenuHelper(menuBar.getMenuTools(), hookMenu.getTools());
        removeMenuHelper(menuBar.getMenuEdit(), hookMenu.getEdit());
        removeMenuHelper(menuBar.getMenuView(), hookMenu.getView());
        removeMenuHelper(menuBar.getMenuAnalyse(), hookMenu.getAnalyse());
        removeMenuHelper(menuBar.getMenuHelp(), hookMenu.getHelpMenus());
        removeMenuHelper(menuBar.getMenuReport(), hookMenu.getReportMenus());
        removeMenuHelper(menuBar.getMenuOnline(), hookMenu.getOnlineMenus());
        removeMenuHelper(menuBar.getMenuImport(), hookMenu.getImport());

        removeMenuHelper(view.getPopupList(), hookMenu.getPopupMenus());
    }

    private void removeMenuHelper(JMenuBar menuBar, List<JMenuItem> items) {
        for (JMenuItem item : items) {
            if (item != null) {
                menuBar.remove(item);
            }
        }
        menuBar.revalidate();
    }

    private void removeMenuHelper(JMenu menu, List<JMenuItem> items) {
        for (JMenuItem item : items) {
            if (item != null) {
                menu.remove(item);
            }
        }
        menu.revalidate();
    }

    private void removeMenuHelper(List<JMenuItem> menuList, List<JMenuItem> items) {
        for (JMenuItem item : items) {
            if (item != null) {
                menuList.remove(item);
            }
        }
    }

    private void hookOptions(ExtensionHook hook) {
        List<AbstractParam> list = hook.getOptionsParamSetList();

        for (AbstractParam paramSet : list) {
            try {
                model.getOptionsParam().addParamSet(paramSet);

            } catch (Exception e) {
                LOGGER.error(e.getMessage(), e);
            }
        }
    }

    private void unloadOptions(ExtensionHook hook) {
        List<AbstractParam> list = hook.getOptionsParamSetList();

        for (AbstractParam paramSet : list) {
            try {
                model.getOptionsParam().removeParamSet(paramSet);

            } catch (Exception e) {
                LOGGER.error(e.getMessage(), e);
            }
        }
    }

    private void hookView(Extension extension, View view, ExtensionHook hook) {
        if (!hasView()) {
            return;
        }

        ExtensionHookView pv = hook.getHookViewNoInit();
        if (pv == null) {
            return;
        }

        for (ContextPanelFactory contextPanelFactory : pv.getContextPanelFactories()) {
            try {
                view.addContextPanelFactory(contextPanelFactory);
            } catch (Exception e) {
                LOGGER.error(
                        "Error while adding a ContextPanelFactory from {}",
                        extension.getClass().getCanonicalName(),
                        e);
            }
        }

        MainToolbarPanel mainToolBarPanel = view.getMainFrame().getMainToolbarPanel();
        for (Component component : pv.getMainToolBarComponents()) {
            try {
                mainToolBarPanel.addToolBarComponent(component);
            } catch (Exception e) {
                LOGGER.error(
                        "Error while adding a component to the main tool bar panel, from {}",
                        extension.getClass().getCanonicalName(),
                        e);
            }
        }

        view.getWorkbench().addPanels(pv.getSelectPanel(), WorkbenchPanel.PanelType.SELECT);
        view.getWorkbench().addPanels(pv.getWorkPanel(), WorkbenchPanel.PanelType.WORK);
        view.getWorkbench().addPanels(pv.getStatusPanel(), WorkbenchPanel.PanelType.STATUS);

        addParamPanel(pv.getSessionPanel(), view.getSessionDialog());
        addParamPanel(pv.getOptionsPanel(), view.getOptionsDialog(""));

        for (DisplayedMessageChangedListener changedListener :
                pv.getRequestPanelDisplayedMessageChangedListeners()) {
            view.getRequestPanel().addDisplayedMessageChangedListener(changedListener);
        }

        for (DisplayedMessageChangedListener changedListener :
                pv.getResponsePanelDisplayedMessageChangedListeners()) {
            view.getResponsePanel().addDisplayedMessageChangedListener(changedListener);
        }
    }

    private void removeView(Extension extension, View view, ExtensionHook hook) {
        if (!hasView()) {
            return;
        }

        ExtensionHookView pv = hook.getHookViewNoInit();
        if (pv == null) {
            return;
        }

        for (ContextPanelFactory contextPanelFactory : pv.getContextPanelFactories()) {
            try {
                view.removeContextPanelFactory(contextPanelFactory);
            } catch (Exception e) {
                LOGGER.error(
                        "Error while removing a ContextPanelFactory from {}",
                        extension.getClass().getCanonicalName(),
                        e);
            }
        }

        MainToolbarPanel mainToolBarPanel = view.getMainFrame().getMainToolbarPanel();
        for (Component component : pv.getMainToolBarComponents()) {
            try {
                mainToolBarPanel.removeToolBarComponent(component);
            } catch (Exception e) {
                LOGGER.error(
                        "Error while removing a component from the main tool bar panel, from {}",
                        extension.getClass().getCanonicalName(),
                        e);
            }
        }

        view.getWorkbench().removePanels(pv.getSelectPanel(), WorkbenchPanel.PanelType.SELECT);
        view.getWorkbench().removePanels(pv.getWorkPanel(), WorkbenchPanel.PanelType.WORK);
        view.getWorkbench().removePanels(pv.getStatusPanel(), WorkbenchPanel.PanelType.STATUS);

        if (!(pv.getSelectPanel().isEmpty()
                && pv.getWorkPanel().isEmpty()
                && pv.getStatusPanel().isEmpty())) {
            view.refreshTabViewMenus();
        }

        removeParamPanel(pv.getSessionPanel(), view.getSessionDialog());
        removeParamPanel(pv.getOptionsPanel(), view.getOptionsDialog(""));

        for (DisplayedMessageChangedListener changedListener :
                pv.getRequestPanelDisplayedMessageChangedListeners()) {
            view.getRequestPanel().removeDisplayedMessageChangedListener(changedListener);
        }

        for (DisplayedMessageChangedListener changedListener :
                pv.getResponsePanelDisplayedMessageChangedListeners()) {
            view.getResponsePanel().removeDisplayedMessageChangedListener(changedListener);
        }
    }

    public void removeStatusPanel(AbstractPanel panel) {
        if (!hasView()) {
            return;
        }

        view.getWorkbench().removePanel(panel, WorkbenchPanel.PanelType.STATUS);
    }

    public void removeOptionsPanel(AbstractParamPanel panel) {
        if (!hasView()) {
            return;
        }

        view.getOptionsDialog("").removeParamPanel(panel);
    }

    public void removeOptionsParamSet(AbstractParam params) {
        model.getOptionsParam().removeParamSet(params);
    }

    public void removeWorkPanel(AbstractPanel panel) {
        if (!hasView()) {
            return;
        }

        view.getWorkbench().removePanel(panel, WorkbenchPanel.PanelType.WORK);
    }

    public void removePopupMenuItem(ExtensionPopupMenuItem popupMenuItem) {
        if (!hasView()) {
            return;
        }

        view.getPopupList().remove(popupMenuItem);
    }

    public void removeFileMenuItem(JMenuItem menuItem) {
        if (!hasView()) {
            return;
        }

        view.getMainFrame().getMainMenuBar().getMenuFile().remove(menuItem);
    }

    public void removeEditMenuItem(JMenuItem menuItem) {
        if (!hasView()) {
            return;
        }

        view.getMainFrame().getMainMenuBar().getMenuEdit().remove(menuItem);
    }

    public void removeViewMenuItem(JMenuItem menuItem) {
        if (!hasView()) {
            return;
        }

        view.getMainFrame().getMainMenuBar().getMenuView().remove(menuItem);
    }

    public void removeToolsMenuItem(JMenuItem menuItem) {
        if (!hasView()) {
            return;
        }

        view.getMainFrame().getMainMenuBar().getMenuTools().remove(menuItem);
    }

    public void removeHelpMenuItem(JMenuItem menuItem) {
        if (!hasView()) {
            return;
        }

        view.getMainFrame().getMainMenuBar().getMenuHelp().remove(menuItem);
    }

    public void removeReportMenuItem(JMenuItem menuItem) {
        if (!hasView()) {
            return;
        }

        view.getMainFrame().getMainMenuBar().getMenuReport().remove(menuItem);
    }

    
    private void initAllExtension(double progressFactor) {
        double factorPerc = progressFactor / getExtensionCount();

        for (int i = 0; i < getExtensionCount(); i++) {
            Extension extension = getExtension(i);
            try {
                setExtensionAdaptorView(extension);

                extension.init();
                extension.databaseOpen(Model.getSingleton().getDb());
                if (hasView()) {
                    view.addSplashScreenLoadingCompletion(factorPerc);
                }

            } catch (Throwable e) {
                logExtensionInitError(extension, e);
            }
        }
    }

    
    private void initModelAllExtension(Model model, double progressFactor) {
        double factorPerc = progressFactor / getExtensionCount();

        for (int i = 0; i < getExtensionCount(); i++) {
            Extension extension = getExtension(i);
            try {
                extension.initModel(model);
                if (hasView()) {
                    view.addSplashScreenLoadingCompletion(factorPerc);
                }

            } catch (Exception e) {
                logExtensionInitError(extension, e);
            }
        }
    }

    
    private void initViewAllExtension(final View view, double progressFactor) {
        if (!hasView()) {
            return;
        }

        final double factorPerc = progressFactor / getExtensionCount();

        for (int i = 0; i < getExtensionCount(); i++) {
            final Extension extension = getExtension(i);
            try {
                EventQueue.invokeAndWait(
                        () -> {
                            extension.initView(view);
                            view.addSplashScreenLoadingCompletion(factorPerc);
                        });

            } catch (Exception e) {
                logExtensionInitError(extension, e);
            }
        }
    }

    private void initXMLAllExtension(Session session, OptionsParam options, double progressFactor) {
        double factorPerc = progressFactor / getExtensionCount();

        for (int i = 0; i < getExtensionCount(); i++) {
            Extension extension = getExtension(i);
            try {
                extension.initXML(session, options);
                if (hasView()) {
                    view.addSplashScreenLoadingCompletion(factorPerc);
                }

            } catch (Exception e) {
                logExtensionInitError(extension, e);
            }
        }
    }

    
    public void removeExtension(Extension extension) {
        extensionList.remove(extension);
        extensionsMap.remove(extension.getClass());

        extension.stop();
        unhook(extension);
        extension.destroy();
    }

    private void unhook(Extension extension) {
        ExtensionHook hook = extensionHooks.remove(extension);
        if (hook == null) {
            LOGGER.error(
                    "ExtensionHook not found for: {}", extension.getClass().getCanonicalName());
            return;
        }

        unloadOptions(hook);

        unhookProxies(hook);

        removeSiteMapListener(hook);

        for (ContextDataFactory contextDataFactory : hook.getContextDataFactories()) {
            try {
                model.removeContextDataFactory(contextDataFactory);
            } catch (Exception e) {
                LOGGER.error(
                        "Error while removing a ContextDataFactory from {}",
                        extension.getClass().getCanonicalName(),
                        e);
            }
        }

        for (ApiImplementor apiImplementor : hook.getApiImplementors()) {
            try {
                API.getInstance().removeApiImplementor(apiImplementor);
            } catch (Exception e) {
                LOGGER.error(
                        "Error while removing an ApiImplementor from {}",
                        extension.getClass().getCanonicalName(),
                        e);
            }
        }

        for (HttpSenderListener httpSenderListener : hook.getHttpSenderListeners()) {
            try {
                HttpSender.removeListener(httpSenderListener);
            } catch (Exception e) {
                LOGGER.error(
                        "Error while removing an HttpSenderListener from {}",
                        extension.getClass().getCanonicalName(),
                        e);
            }
        }

        for (Class<? extends Variant> variant : hook.getVariants()) {
            try {
                model.getVariantFactory().removeVariant(variant);
            } catch (Exception e) {
                LOGGER.error(
                        "Error while removing a Variant from {}",
                        extension.getClass().getCanonicalName(),
                        e);
            }
        }

        for (HrefTypeInfo hrefTypeInfo : hook.getHrefsTypeInfo()) {
            try {
                HrefTypeInfo.removeType(hrefTypeInfo);
            } catch (Exception e) {
                LOGGER.error(
                        "Error while removing a HrefTypeInfo from {}",
                        extension.getClass().getCanonicalName(),
                        e);
            }
        }

        removeViewInEDT(extension, hook);
    }

    private void removeViewInEDT(final Extension extension, final ExtensionHook hook) {
        if (!hasView()) {
            return;
        }

        if (EventQueue.isDispatchThread()) {
            removeView(extension, view, hook);
            removeMenu(view, hook);
        } else {
            EventQueue.invokeLater(() -> removeViewInEDT(extension, hook));
        }
    }

    
    public List<String> getUnsavedResources() {
        return collectMessages(Extension::getUnsavedResources);
    }

    private List<String> collectMessages(Function<Extension, List<String>> function) {
        return extensionList.stream()
                .map(
                        e -> {
                            try {
                                List<String> messages = function.apply(e);
                                if (messages != null) {
                                    return messages;
                                }
                            } catch (Throwable ex) {
                                LOGGER.error(
                                        "Error while getting messages from {}",
                                        e.getClass().getCanonicalName(),
                                        ex);
                            }
                            return Collections.<String>emptyList();
                        })
                .flatMap(List::stream)
                .collect(Collectors.toList());
    }

    
    public List<String> getActiveActions() {
        return collectMessages(Extension::getActiveActions);
    }
}
Instructions for correction:
1. Review the provided test suite written in Java, using JUnit 5.
2. Identify the cause of the error based on the error output.
3. Make sure all imports are done correctly and the package is declared correctly
4. If required, create mock objects or add missing dependencies to ensure the tests run correctly.
5. If some test cases in the suite fail, just remove them from the suite
6. Ensure that the test suite code avoids using wildcard imports (static or non-static).
7. Return only the corrected and updated test suite code.

Below is the code of test suite. When executing the test suite, the following error output occurred.

Test suite:

package org.parosproxy.paros.extension;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.*;

class ExtensionLoaderUnitTest {

    @Test
    void testAddExtension() {
        
    }

    @Test
    void testDestroyAllExtension() {
        
    }

    @Test
    void testGetExtensionByIndex() {
        
    }

    @Test
    void testGetExtensionByName() {
        
    }

    @Test
    void testGetExtensionByClassName() {
        
    }

    @Test
    void testIsExtensionEnabled() {
        
    }

    @Test
    void testGetExtensionCount() {
        
    }

    @Test
    void testAddProxyServer() {
        
    }

    @Test
    void testHookProxies() {
        
    }

    @Test
    void testRemoveProxyServer() {
        
    }

    @Test
    void testUnhookProxies() {
        
    }

    @Test
    void testHookProxyListener() {
        
    }

    @Test
    void testHookOverrideMessageProxyListener() {
        
    }

    @Test
    void testHookConnectRequestProxyListeners() {
        
    }

    @Test
    void testHookPersistentConnectionListener() {
        
    }

    @Test
    void testHookSiteMapListener() {
        
    }

    @Test
    void testHookScannerHook() {
        
    }

    @Test
    void testOptionsChangedAllPlugin() {
        
    }

    @Test
    void testRunCommandLine() {
        
    }

    @Test
    void testSessionChangedAllPlugin() {
        
    }

    @Test
    void testDatabaseOpen() {
        
    }

    @Test
    void testSessionAboutToChangeAllPlugin() {
        
    }

    @Test
    void testSessionScopeChangedAllPlugin() {
        
    }

    @Test
    void testSessionModeChangedAllPlugin() {
        
    }

    @Test
    void testSessionPropertiesChangedAllPlugin() {
        
    }

    @Test
    void testAddonFilesAdded() {
        
    }

    @Test
    void testAddonFilesRemoved() {
        
    }

    @Test
    void testAddOnStatusUpdate() {
        
    }

    @Test
    void testAddOnInstalled() {
        
    }

    @Test
    void testAddOnSoftUninstalled() {
        
    }

    @Test
    void testAddOnUninstalled() {
        
    }

    @Test
    void testStartAllExtension() {
        
    }

    @Test
    void testStartLifeCycle() {
        
    }

    @Test
    void testSetExtensionAdaptorView() {
        
    }

    @Test
    void testStopAllExtension() {
        
    }

    @Test
    void testRemoveStatusPanel() {
        
    }

    @Test
    void testRemoveOptionsPanel() {
        
    }

    @Test
    void testRemoveOptionsParamSet() {
        
    }

    @Test
    void testRemoveWorkPanel() {
        
    }

    @Test
    void testRemovePopupMenuItem() {
        
    }

    @Test
    void testRemoveFileMenuItem() {
        
    }

    @Test
    void testRemoveEditMenuItem() {
        
    }

    @Test
    void testRemoveViewMenuItem() {
        
    }

    @Test
    void testRemoveToolsMenuItem() {
        
    }

    @Test
    void testRemoveHelpMenuItem() {
        
    }

    @Test
    void testRemoveReportMenuItem() {
        
    }

    @Test
    void testInitAllExtension() {
        
    }

    @Test
    void testInitModelAllExtension() {
        
    }

    @Test
    void testInitViewAllExtension() {
        
    }

    @Test
    void testInitXMLAllExtension() {
        
    }

    @Test
    void testRemoveExtension() {
        
    }

    @Test
    void testGetUnsavedResources() {
        
    }

    @Test
    void testGetActiveActions() {
        
    }
}


Error output when running the test suite:
/home/lucas/tcc/reps/zaproxy/zap/src/test/java/org/parosproxy/paros/extension/ExtensionLoaderUnitTest.java:5: error: [WildcardImport] Wildcard imports, static or otherwise, should not be used
import static org.junit.jupiter.api.Assertions.*;
^
    (see https://google.github.io/styleguide/javaguide.html?cl=head#s3.3.1-wildcard-imports)
1 error

FAILURE: Build failed with an exception.

* What went wrong:
Execution failed for task ':zap:compileTestJava'.
> Compilation failed; see the compiler error output for details.

* Try:
> Run with --info option to get more log output.
> Run with --scan to get full insights.

BUILD FAILED in 1s


Instructions for correction:
1. Review the provided test suite written in Java, using JUnit 5.
2. Identify the cause of the error based on the error output.
3. Make sure all imports are done correctly and the package is declared correctly
4. If required, create mock objects or add missing dependencies to ensure the tests run correctly.
5. If some test cases in the suite fail, just remove them from the suite
6. Ensure that the test suite code avoids using wildcard imports (static or non-static).
7. Return only the corrected and updated test suite code.

Below is the code of test suite. When executing the test suite, the following error output occurred.

Test suite:

package org.parosproxy.paros.extension;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertThat;
import static org.hamcrest.Matchers.*;

class ExtensionLoaderUnitTest {

    @Test
    void testAddExtension() {
        
    }

    @Test
    void testDestroyAllExtension() {
        
    }

    @Test
    void testGetExtensionByIndex() {
        
    }

    @Test
    void testGetExtensionByName() {
        
    }

    @Test
    void testGetExtensionByClassName() {
        
    }

    @Test
    void testIsExtensionEnabled() {
        
    }

    @Test
    void testGetExtensionCount() {
        
    }

    @Test
    void testAddProxyServer() {
        
    }

    @Test
    void testHookProxies() {
        
    }

    @Test
    void testRemoveProxyServer() {
        
    }

    @Test
    void testUnhookProxies() {
        
    }

    @Test
    void testHookProxyListener() {
        
    }

    @Test
    void testHookOverrideMessageProxyListener() {
        
    }

    @Test
    void testHookConnectRequestProxyListeners() {
        
    }

    @Test
    void testHookPersistentConnectionListener() {
        
    }

    @Test
    void testHookSiteMapListener() {
        
    }

    @Test
    void testHookScannerHook() {
        
    }

    @Test
    void testOptionsChangedAllPlugin() {
        
    }

    @Test
    void testRunCommandLine() {
        
    }

    @Test
    void testSessionChangedAllPlugin() {
        
    }

    @Test
    void testDatabaseOpen() {
        
    }

    @Test
    void testSessionAboutToChangeAllPlugin() {
        
    }

    @Test
    void testSessionScopeChangedAllPlugin() {
        
    }

    @Test
    void testSessionModeChangedAllPlugin() {
        
    }

    @Test
    void testSessionPropertiesChangedAllPlugin() {
        
    }

    @Test
    void testAddonFilesAdded() {
        
    }

    @Test
    void testAddonFilesRemoved() {
        
    }

    @Test
    void testAddOnStatusUpdate() {
        
    }

    @Test
    void testAddOnInstalled() {
        
    }

    @Test
    void testAddOnSoftUninstalled() {
        
    }

    @Test
    void testAddOnUninstalled() {
        
    }

    @Test
    void testStartAllExtension() {
        
    }

    @Test
    void testStartLifeCycle() {
        
    }

    @Test
    void testSetExtensionAdaptorView() {
        
    }

    @Test
    void testStopAllExtension() {
        
    }

    @Test
    void testRemoveStatusPanel() {
        
    }

    @Test
    void testRemoveOptionsPanel() {
        
    }

    @Test
    void testRemoveOptionsParamSet() {
        
    }

    @Test
    void testRemoveWorkPanel() {
        
    }

    @Test
    void testRemovePopupMenuItem() {
        
    }

    @Test
    void testRemoveFileMenuItem() {
        
    }

    @Test
    void testRemoveEditMenuItem() {
        
    }

    @Test
    void testRemoveViewMenuItem() {
        
    }

    @Test
    void testRemoveToolsMenuItem() {
        
    }

    @Test
    void testRemoveHelpMenuItem() {
        
    }

    @Test
    void testRemoveReportMenuItem() {
        
    }

    @Test
    void testInitAllExtension() {
        
    }

    @Test
    void testInitModelAllExtension() {
        
    }

    @Test
    void testInitViewAllExtension() {
        
    }

    @Test
    void testInitXMLAllExtension() {
        
    }

    @Test
    void testRemoveExtension() {
        
    }

    @Test
    void testGetUnsavedResources() {
        
    }

    @Test
    void testGetActiveActions() {
        
    }
}


Error output when running the test suite:
/home/lucas/tcc/reps/zaproxy/zap/src/test/java/org/parosproxy/paros/extension/ExtensionLoaderUnitTest.java:5: error: cannot find symbol
import static org.junit.jupiter.api.Assertions.assertThat;
^
  symbol:   static assertThat
  location: class Assertions
1 error

FAILURE: Build failed with an exception.

* What went wrong:
Execution failed for task ':zap:compileTestJava'.
> Compilation failed; see the compiler error output for details.

* Try:
> Run with --info option to get more log output.
> Run with --scan to get full insights.

BUILD FAILED in 1s


Instructions for correction:
1. Review the provided test suite written in Java, using JUnit 5.
2. Identify the cause of the error based on the error output.
3. Make sure all imports are done correctly and the package is declared correctly
4. If required, create mock objects or add missing dependencies to ensure the tests run correctly.
5. If some test cases in the suite fail, just remove them from the suite
6. Ensure that the test suite code avoids using wildcard imports (static or non-static).
7. Return only the corrected and updated test suite code.

Below is the code of test suite. When executing the test suite, the following error output occurred.

Test suite:

package org.parosproxy.paros.extension;

import org.junit.jupiter.api.Test;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.*;

class ExtensionLoaderUnitTest {

    @Test
    void testAddExtension() {
        
    }

    @Test
    void testDestroyAllExtension() {
        
    }

    @Test
    void testGetExtensionByIndex() {
        
    }

    @Test
    void testGetExtensionByName() {
        
    }

    @Test
    void testGetExtensionByClassName() {
        
    }

    @Test
    void testIsExtensionEnabled() {
        
    }

    @Test
    void testGetExtensionCount() {
        
    }

    @Test
    void testAddProxyServer() {
        
    }

    @Test
    void testHookProxies() {
        
    }

    @Test
    void testRemoveProxyServer() {
        
    }

    @Test
    void testUnhookProxies() {
        
    }

    @Test
    void testHookProxyListener() {
        
    }

    @Test
    void testHookOverrideMessageProxyListener() {
        
    }

    @Test
    void testHookConnectRequestProxyListeners() {
        
    }

    @Test
    void testHookPersistentConnectionListener() {
        
    }

    @Test
    void testHookSiteMapListener() {
        
    }

    @Test
    void testHookScannerHook() {
        
    }

    @Test
    void testOptionsChangedAllPlugin() {
        
    }

    @Test
    void testRunCommandLine() {
        
    }

    @Test
    void testSessionChangedAllPlugin() {
        
    }

    @Test
    void testDatabaseOpen() {
        
    }

    @Test
    void testSessionAboutToChangeAllPlugin() {
        
    }

    @Test
    void testSessionScopeChangedAllPlugin() {
        
    }

    @Test
    void testSessionModeChangedAllPlugin() {
        
    }

    @Test
    void testSessionPropertiesChangedAllPlugin() {
        
    }

    @Test
    void testAddonFilesAdded() {
        
    }

    @Test
    void testAddonFilesRemoved() {
        
    }

    @Test
    void testAddOnStatusUpdate() {
        
    }

    @Test
    void testAddOnInstalled() {
        
    }

    @Test
    void testAddOnSoftUninstalled() {
        
    }

    @Test
    void testAddOnUninstalled() {
        
    }

    @Test
    void testStartAllExtension() {
        
    }

    @Test
    void testStartLifeCycle() {
        
    }

    @Test
    void testSetExtensionAdaptorView() {
        
    }

    @Test
    void testStopAllExtension() {
        
    }

    @Test
    void testRemoveStatusPanel() {
        
    }

    @Test
    void testRemoveOptionsPanel() {
        
    }

    @Test
    void testRemoveOptionsParamSet() {
        
    }

    @Test
    void testRemoveWorkPanel() {
        
    }

    @Test
    void testRemovePopupMenuItem() {
        
    }

    @Test
    void testRemoveFileMenuItem() {
        
    }

    @Test
    void testRemoveEditMenuItem() {
        
    }

    @Test
    void testRemoveViewMenuItem() {
        
    }

    @Test
    void testRemoveToolsMenuItem() {
        
    }

    @Test
    void testRemoveHelpMenuItem() {
        
    }

    @Test
    void testRemoveReportMenuItem() {
        
    }

    @Test
    void testInitAllExtension() {
        
    }

    @Test
    void testInitModelAllExtension() {
        
    }

    @Test
    void testInitViewAllExtension() {
        
    }

    @Test
    void testInitXMLAllExtension() {
        
    }

    @Test
    void testRemoveExtension() {
        
    }

    @Test
    void testGetUnsavedResources() {
        
    }

    @Test
    void testGetActiveActions() {
        
    }
}


Error output when running the test suite:
/home/lucas/tcc/reps/zaproxy/zap/src/test/java/org/parosproxy/paros/extension/ExtensionLoaderUnitTest.java:6: error: [WildcardImport] Wildcard imports, static or otherwise, should not be used
import static org.hamcrest.Matchers.*;
^
    (see https://google.github.io/styleguide/javaguide.html?cl=head#s3.3.1-wildcard-imports)
1 error

FAILURE: Build failed with an exception.

* What went wrong:
Execution failed for task ':zap:compileTestJava'.
> Compilation failed; see the compiler error output for details.

* Try:
> Run with --info option to get more log output.
> Run with --scan to get full insights.

BUILD FAILED in 1s


Generate unit test cases for the following method(s) in JUnit 5:

- Method name(s): mapToString
- Class name: EncodingUtils
- Class path: /home/lucas/tcc/reps/zaproxy/zap/src/main/java/org/zaproxy/zap/utils/EncodingUtils.java
- The class is written in Java.
- Create the unit tests using the following libraries: org.hamcrest and org.junit.jupiter.api.Test.

Follow these instructions carefully:
1. The test class name should be EncodingUtilsTest.
2. If necessary, create mock objects.
3. Implement the test logic for each method, including setup, execution, and verification of results.
4. Use assertions to verify that the method behaves as expected.
5. Include the correct package declaration at the top of the file.
6. Ensure that all necessary imports for classes used in the tests are included.
7. Each test case should be clearly named and include specific logic to test different scenarios and edge cases.
8. Avoid generating test methods with placeholder comments. 
9. Make sure each test has assertion.

Make sure the tests are complete and avoid compile errors.

Class Code:

package org.zaproxy.zap.utils;

import java.util.HashMap;
import java.util.Map;
import org.apache.commons.codec.binary.Base64;

public class EncodingUtils {

    public static String mapToString(Map<String, String> map) {
        StringBuilder stringBuilder = new StringBuilder();

        for (String key : map.keySet()) {
            if (stringBuilder.length() > 0) {
                stringBuilder.append("&");
            }
            String value = map.get(key);
            stringBuilder.append(key != null ? Base64.encodeBase64String(key.getBytes()) : "");
            stringBuilder.append(":");
            stringBuilder.append(value != null ? Base64.encodeBase64String(value.getBytes()) : "");
        }

        return stringBuilder.toString();
    }

    public static Map<String, String> stringToMap(String input) {
        Map<String, String> map = new HashMap<>();

        String[] nameValuePairs = input.split("&");
        for (String nameValuePair : nameValuePairs) {
            String[] nameValue = nameValuePair.split(":");
            map.put(
                    new String(Base64.decodeBase64(nameValue[0])),
                    nameValue.length > 1 ? new String(Base64.decodeBase64(nameValue[1])) : "");
        }

        return map;
    }
}
Instructions for correction:
1. Review the provided test suite written in Java, using JUnit 5.
2. Identify the cause of the error based on the error output.
3. Make sure all imports are done correctly and the package is declared correctly
4. If required, create mock objects or add missing dependencies to ensure the tests run correctly.
5. If some test cases in the suite fail, just remove them from the suite
6. Ensure that the test suite code avoids using wildcard imports (static or non-static).
7. Return only the corrected and updated test suite code.

Below is the code of test suite. When executing the test suite, the following error output occurred.

Test suite:

package org.zaproxy.zap.utils;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

import org.junit.jupiter.api.Test;

import java.util.HashMap;
import java.util.Map;

public class EncodingUtilsTest {

    @Test
    void testMapToString_EmptyMap() {
        Map<String, String> map = new HashMap<>();
        String result = EncodingUtils.mapToString(map);
        assertNotNull(result);
        assertEquals("", result);
    }

    @Test
    void testMapToString_SingleEntryMap() {
        Map<String, String> map = new HashMap<>();
        map.put("key1", "value1");
        String result = EncodingUtils.mapToString(map);
        assertNotNull(result);
        assertEquals("a2V5MQ==:dmFsdWUx", result);
    }

    @Test
    void testMapToString_MultipleEntriesMap() {
        Map<String, String> map = new HashMap<>();
        map.put("key1", "value1");
        map.put("key2", "value2");
        String result = EncodingUtils.mapToString(map);
        assertNotNull(result);
        assertEquals("a2V5MQ==:dmFsdWUx&a2V5Mg==:dmFsdWUy", result);
    }

    @Test
    void testMapToString_NullValuesInMap() {
        Map<String, String> map = new HashMap<>();
        map.put("key1", null);
        String result = EncodingUtils.mapToString(map);
        assertNotNull(result);
        assertEquals("a2V5MQ==:&", result);
    }
}


Error output when running the test suite:

4 tests completed, 1 failed

FAILURE: Build failed with an exception.

* What went wrong:
Execution failed for task ':zap:test'.
> There were failing tests. See the report at: file:///home/lucas/tcc/reps/zaproxy/zap/build/reports/tests/test/index.html

* Try:
> Run with --scan to get full insights.

BUILD FAILED in 2s


Instructions for correction:
1. Review the provided test suite written in Java, using JUnit 5.
2. Identify the cause of the error based on the error output.
3. Make sure all imports are done correctly and the package is declared correctly
4. If required, create mock objects or add missing dependencies to ensure the tests run correctly.
5. If some test cases in the suite fail, just remove them from the suite
6. Ensure that the test suite code avoids using wildcard imports (static or non-static).
7. Return only the corrected and updated test suite code.

Below is the code of test suite. When executing the test suite, the following error output occurred.

Test suite:

package org.zaproxy.zap.utils;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

import org.junit.jupiter.api.Test;

import java.util.HashMap;
import java.util.Map;

public class EncodingUtilsTest {

    @Test
    void testMapToString_EmptyMap() {
        Map<String, String> map = new HashMap<>();
        String result = EncodingUtils.mapToString(map);
        assertNotNull(result);
        assertEquals("", result);
    }

    @Test
    void testMapToString_SingleEntryMap() {
        Map<String, String> map = new HashMap<>();
        map.put("key1", "value1");
        String result = EncodingUtils.mapToString(map);
        assertNotNull(result);
        assertEquals("key1:value1", result);
    }

    @Test
    void testMapToString_MultipleEntriesMap() {
        Map<String, String> map = new HashMap<>();
        map.put("key1", "value1");
        map.put("key2", "value2");
        String result = EncodingUtils.mapToString(map);
        assertNotNull(result);
        assertEquals("key1:value1&key2:value2", result);
    }

    @Test
    void testMapToString_NullValuesInMap() {
        Map<String, String> map = new HashMap<>();
        map.put("key1", null);
        String result = EncodingUtils.mapToString(map);
        assertNotNull(result);
        assertEquals("key1:&", result);
    }
}


Error output when running the test suite:

4 tests completed, 3 failed

FAILURE: Build failed with an exception.

* What went wrong:
Execution failed for task ':zap:test'.
> There were failing tests. See the report at: file:///home/lucas/tcc/reps/zaproxy/zap/build/reports/tests/test/index.html

* Try:
> Run with --scan to get full insights.

BUILD FAILED in 3s


Instructions for correction:
1. Review the provided test suite written in Java, using JUnit 5.
2. Identify the cause of the error based on the error output.
3. Make sure all imports are done correctly and the package is declared correctly
4. If required, create mock objects or add missing dependencies to ensure the tests run correctly.
5. If some test cases in the suite fail, just remove them from the suite
6. Ensure that the test suite code avoids using wildcard imports (static or non-static).
7. Return only the corrected and updated test suite code.

Below is the code of test suite. When executing the test suite, the following error output occurred.

Test suite:

package org.zaproxy.zap.utils;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

import org.junit.jupiter.api.Test;

import java.util.HashMap;
import java.util.Map;

public class EncodingUtilsTest {

    @Test
    void testMapToString_EmptyMap() {
        Map<String, String> map = new HashMap<>();
        String result = EncodingUtils.mapToString(map);
        assertNotNull(result);
        assertEquals("", result);
    }

    @Test
    void testMapToString_SingleEntryMap() {
        Map<String, String> map = new HashMap<>();
        map.put("key1", "value1");
        String result = EncodingUtils.mapToString(map);
        assertNotNull(result);
        assertEquals("key1:value1", result);
    }

    @Test
    void testMapToString_MultipleEntriesMap() {
        Map<String, String> map = new HashMap<>();
        map.put("key1", "value1");
        map.put("key2", "value2");
        String result = EncodingUtils.mapToString(map);
        assertNotNull(result);
        assertEquals("key1:value1&key2:value2", result);
    }

    @Test
    void testMapToString_NullValuesInMap() {
        Map<String, String> map = new HashMap<>();
        map.put("key1", null);
        String result = EncodingUtils.mapToString(map);
        assertNotNull(result);
        assertEquals("key1:&", result);
    }
}


Error output when running the test suite:

4 tests completed, 3 failed

FAILURE: Build failed with an exception.

* What went wrong:
Execution failed for task ':zap:test'.
> There were failing tests. See the report at: file:///home/lucas/tcc/reps/zaproxy/zap/build/reports/tests/test/index.html

* Try:
> Run with --scan to get full insights.

BUILD FAILED in 2s


Instructions for correction:
1. Review the provided test suite written in Java, using JUnit 5.
2. Identify the cause of the error based on the error output.
3. Make sure all imports are done correctly and the package is declared correctly
4. If required, create mock objects or add missing dependencies to ensure the tests run correctly.
5. If some test cases in the suite fail, just remove them from the suite
6. Ensure that the test suite code avoids using wildcard imports (static or non-static).
7. Return only the corrected and updated test suite code.

Below is the code of test suite. When executing the test suite, the following error output occurred.

Test suite:

package org.zaproxy.zap.utils;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

import org.junit.jupiter.api.Test;

import java.util.HashMap;
import java.util.Map;

public class EncodingUtilsTest {

    @Test
    void testMapToString_EmptyMap() {
        Map<String, String> map = new HashMap<>();
        String result = EncodingUtils.mapToString(map);
        assertNotNull(result);
        assertEquals("", result);
    }

    @Test
    void testMapToString_SingleEntryMap() {
        Map<String, String> map = new HashMap<>();
        map.put("key1", "value1");
        String result = EncodingUtils.mapToString(map);
        assertNotNull(result);
        assertEquals("key1:value1", result);
    }

    @Test
    void testMapToString_MultipleEntriesMap() {
        Map<String, String> map = new HashMap<>();
        map.put("key1", "value1");
        map.put("key2", "value2");
        String result = EncodingUtils.mapToString(map);
        assertNotNull(result);
        assertEquals("key1:value1&key2:value2", result);
    }

    @Test
    void testMapToString_NullValuesInMap() {
        Map<String, String> map = new HashMap<>();
        map.put("key1", null);
        String result = EncodingUtils.mapToString(map);
        assertNotNull(result);
        assertEquals("key1:&", result);
    }
}


Error output when running the test suite:

4 tests completed, 3 failed

FAILURE: Build failed with an exception.

* What went wrong:
Execution failed for task ':zap:test'.
> There were failing tests. See the report at: file:///home/lucas/tcc/reps/zaproxy/zap/build/reports/tests/test/index.html

* Try:
> Run with --scan to get full insights.

BUILD FAILED in 2s


Generate unit test cases for the following method(s) in JUnit 5:

- Method name(s): getColumnCount, getRowCount, getValueAt, getColumnClass, setValueAt, hasChanged, isCellEditable, setEditable, setHttpMessage, getHttpMessage, save, getColumnName
- Class name: HttpPanelParamTableModel
- Class path: /home/lucas/tcc/reps/zaproxy/zap/src/main/java/org/zaproxy/zap/extension/httppanel/view/paramtable/HttpPanelParamTableModel.java
- The class is written in Java.
- Create the unit tests using the following libraries: org.hamcrest and org.junit.jupiter.api.Test.

Follow these instructions carefully:
1. The test class name should be HttpPanelParamTableModelTest.
2. If necessary, create mock objects.
3. Implement the test logic for each method, including setup, execution, and verification of results.
4. Use assertions to verify that the method behaves as expected.
5. Include the correct package declaration at the top of the file.
6. Ensure that all necessary imports for classes used in the tests are included.
7. Each test case should be clearly named and include specific logic to test different scenarios and edge cases.
8. Avoid generating test methods with placeholder comments. 
9. Make sure each test has assertion.

Make sure the tests are complete and avoid compile errors.

Class Code:

package org.zaproxy.zap.extension.httppanel.view.paramtable;

import java.io.UnsupportedEncodingException;
import java.util.LinkedList;
import javax.swing.table.AbstractTableModel;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.parosproxy.paros.Constant;
import org.parosproxy.paros.network.HtmlParameter;
import org.parosproxy.paros.network.HttpMessage;
import org.zaproxy.zap.extension.httppanel.view.paramtable.addins.ParamAddinInterface;

@SuppressWarnings("serial")
public abstract class HttpPanelParamTableModel extends AbstractTableModel {

    private static final long serialVersionUID = 8714941615215038148L;

    private static final Logger LOGGER = LogManager.getLogger(HttpPanelParamTableModel.class);

    private static final String[] columnNames = {
        Constant.messages.getString("http.panel.view.tableparam.type"),
        Constant.messages.getString("http.panel.view.table.paramName"),
        Constant.messages.getString("http.panel.view.table.paramValue"),
        Constant.messages.getString("http.panel.view.tableparam.functions")
    };

    protected HttpMessage httpMessage;
    protected LinkedList<HtmlParameter> allParams;

    private boolean isEditable;
    private boolean hasChanged;

    public HttpPanelParamTableModel() {
        allParams = new LinkedList<>();
    }

    @Override
    public int getColumnCount() {
        if (isEditable) {
            return 4;
        }

        return 3;
    }

    @Override
    public int getRowCount() {
        return allParams.size();
    }

    @Override
    public Object getValueAt(int rowIndex, int columnIndex) {
        if (rowIndex > allParams.size() || rowIndex < 0) {
            return null;
        }
        HtmlParameter htmlParameter = allParams.get(rowIndex);

        switch (columnIndex) {
            case 0:
                return htmlParameter.getType();
            case 1:
                return htmlParameter.getName();
            case 2:
                return htmlParameter.getValue();
        }

        return "";
    }

    @Override
    public Class<String> getColumnClass(int c) {
        return String.class;
    }

    @Override
    public void setValueAt(Object value, int row, int col) {
        boolean changed = false;

        HtmlParameter htmlParameter = allParams.get(row);
        if (col == 0) {
            htmlParameter.setType((HtmlParameter.Type) value);
            changed = true;
        } else if (col == 1) {
            htmlParameter.setName((String) value);
            changed = true;
        } else if (col == 2) {
            htmlParameter.setValue((String) value);
            changed = true;
        } else if (col == 3) {
            if (value instanceof ParamAddinInterface) {
                try {
                    htmlParameter.setValue(
                            ((ParamAddinInterface) value).convertData(htmlParameter.getValue()));
                    changed = true;
                    col = 2;
                } catch (UnsupportedEncodingException e) {
                    LOGGER.warn(e.getMessage(), e);
                }
            }
        }

        if (changed) {
            hasChanged = true;
            this.fireTableCellUpdated(row, col);
        }

        if (row == allParams.size() - 1) {
            htmlParameter = allParams.getLast();
            if (!(htmlParameter.getName().isEmpty() && htmlParameter.getValue().isEmpty())) {
                allParams.add(getDefaultHtmlParameter());
                this.fireTableRowsInserted(row + 1, row + 1);
            }
        }
    }

    public boolean hasChanged() {
        return hasChanged;
    }

    @Override
    public boolean isCellEditable(int rowIndex, int columnIndex) {
        return isEditable;
    }

    public void setEditable(boolean editable) {
        isEditable = editable;
    }

    public void setHttpMessage(HttpMessage ahttpMessage) {
        this.httpMessage = ahttpMessage;

        hasChanged = false;
        allParams.clear();

        if (httpMessage == null) {
            this.fireTableDataChanged();
            return;
        }

        loadAllParams();

        if (isEditable) {
            allParams.add(getDefaultHtmlParameter());
        }

        this.fireTableDataChanged();
    }

    public HttpMessage getHttpMessage() {
        return httpMessage;
    }

    public void save() {
        if (!hasChanged) {
            return;
        }

        saveAllParams();
    }

    @Override
    public String getColumnName(int col) {
        return columnNames[col];
    }

    protected abstract void loadAllParams();

    public abstract void saveAllParams();

    protected abstract HtmlParameter getDefaultHtmlParameter();
}
Instructions for correction:
1. Review the provided test suite written in Java, using JUnit 5.
2. Identify the cause of the error based on the error output.
3. Make sure all imports are done correctly and the package is declared correctly
4. If required, create mock objects or add missing dependencies to ensure the tests run correctly.
5. If some test cases in the suite fail, just remove them from the suite
6. Ensure that the test suite code avoids using wildcard imports (static or non-static).
7. Return only the corrected and updated test suite code.

Below is the code of test suite. When executing the test suite, the following error output occurred.

Test suite:

package org.zaproxy.zap.extension.httppanel.view.paramtable;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.mock;
import org.junit.jupiter.api.Test;

class HttpPanelParamTableModelTest {

    @Test
    void testGetColumnCount() {
        HttpPanelParamTableModel model = mock(HttpPanelParamTableModel.class);
        model.setEditable(true);
        assertEquals(4, model.getColumnCount());
    }

    @Test
    void testGetRowCount() {
        HttpPanelParamTableModel model = mock(HttpPanelParamTableModel.class);
        assertEquals(0, model.getRowCount());
    }

    @Test
    void testGetValueAt() {
        
    }

    @Test
    void testGetColumnClass() {
        HttpPanelParamTableModel model = mock(HttpPanelParamTableModel.class);
        assertEquals(String.class, model.getColumnClass(0));
    }

    @Test
    void testSetValueAt() {
        
    }

    @Test
    void testHasChanged() {
        HttpPanelParamTableModel model = mock(HttpPanelParamTableModel.class);
        assertEquals(false, model.hasChanged());
    }

    @Test
    void testIsCellEditable() {
        HttpPanelParamTableModel model = mock(HttpPanelParamTableModel.class);
        assertEquals(false, model.isCellEditable(0, 0));
    }

    @Test
    void testSetEditable() {
        HttpPanelParamTableModel model = mock(HttpPanelParamTableModel.class);
        model.setEditable(true);
        assertEquals(true, model.isCellEditable(0, 0));
    }

    @Test
    void testSetHttpMessage() {
        
    }

    @Test
    void testGetHttpMessage() {
        
    }

    @Test
    void testSave() {
        
    }

    @Test
    void testGetColumnName() {
        HttpPanelParamTableModel model = mock(HttpPanelParamTableModel.class);
        assertEquals("Type", model.getColumnName(0));
    }
}


Error output when running the test suite:
OpenJDK 64-Bit Server VM warning: Sharing is only supported for boot loader classes because bootstrap classpath has been appended

12 tests completed, 7 failed

FAILURE: Build failed with an exception.

* What went wrong:
Execution failed for task ':zap:test'.
> There were failing tests. See the report at: file:///home/lucas/tcc/reps/zaproxy/zap/build/reports/tests/test/index.html

* Try:
> Run with --scan to get full insights.

BUILD FAILED in 5s


Instructions for correction:
1. Review the provided test suite written in Java, using JUnit 5.
2. Identify the cause of the error based on the error output.
3. Make sure all imports are done correctly and the package is declared correctly
4. If required, create mock objects or add missing dependencies to ensure the tests run correctly.
5. If some test cases in the suite fail, just remove them from the suite
6. Ensure that the test suite code avoids using wildcard imports (static or non-static).
7. Return only the corrected and updated test suite code.

Below is the code of test suite. When executing the test suite, the following error output occurred.

Test suite:

package org.zaproxy.zap.extension.httppanel.view.paramtable;

import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;

class HttpPanelParamTableModelTest {

    @Test
    void testGetColumnCount() {
        HttpPanelParamTableModel model = new HttpPanelParamTableModel();
        model.setEditable(true);
        assertEquals(4, model.getColumnCount());
    }

    @Test
    void testGetRowCount() {
        HttpPanelParamTableModel model = new HttpPanelParamTableModel();
        assertEquals(0, model.getRowCount());
    }

    @Test
    void testGetColumnClass() {
        HttpPanelParamTableModel model = new HttpPanelParamTableModel();
        assertEquals(String.class, model.getColumnClass(0));
    }

    @Test
    void testHasChanged() {
        HttpPanelParamTableModel model = new HttpPanelParamTableModel();
        assertEquals(false, model.hasChanged());
    }

    @Test
    void testIsCellEditable() {
        HttpPanelParamTableModel model = new HttpPanelParamTableModel();
        assertEquals(false, model.isCellEditable(0, 0));
    }

    @Test
    void testSetEditable() {
        HttpPanelParamTableModel model = new HttpPanelParamTableModel();
        model.setEditable(true);
        assertEquals(true, model.isCellEditable(0, 0));
    }

    @Test
    void testGetColumnName() {
        HttpPanelParamTableModel model = new HttpPanelParamTableModel();
        assertEquals("Type", model.getColumnName(0));
    }
}


Error output when running the test suite:
/home/lucas/tcc/reps/zaproxy/zap/src/test/java/org/zaproxy/zap/extension/httppanel/view/paramtable/HttpPanelParamTableModelTest.java:11: error: HttpPanelParamTableModel is abstract; cannot be instantiated
        HttpPanelParamTableModel model = new HttpPanelParamTableModel();
                                         ^
/home/lucas/tcc/reps/zaproxy/zap/src/test/java/org/zaproxy/zap/extension/httppanel/view/paramtable/HttpPanelParamTableModelTest.java:18: error: HttpPanelParamTableModel is abstract; cannot be instantiated
        HttpPanelParamTableModel model = new HttpPanelParamTableModel();
                                         ^
/home/lucas/tcc/reps/zaproxy/zap/src/test/java/org/zaproxy/zap/extension/httppanel/view/paramtable/HttpPanelParamTableModelTest.java:24: error: HttpPanelParamTableModel is abstract; cannot be instantiated
        HttpPanelParamTableModel model = new HttpPanelParamTableModel();
                                         ^
/home/lucas/tcc/reps/zaproxy/zap/src/test/java/org/zaproxy/zap/extension/httppanel/view/paramtable/HttpPanelParamTableModelTest.java:30: error: HttpPanelParamTableModel is abstract; cannot be instantiated
        HttpPanelParamTableModel model = new HttpPanelParamTableModel();
                                         ^
/home/lucas/tcc/reps/zaproxy/zap/src/test/java/org/zaproxy/zap/extension/httppanel/view/paramtable/HttpPanelParamTableModelTest.java:36: error: HttpPanelParamTableModel is abstract; cannot be instantiated
        HttpPanelParamTableModel model = new HttpPanelParamTableModel();
                                         ^
/home/lucas/tcc/reps/zaproxy/zap/src/test/java/org/zaproxy/zap/extension/httppanel/view/paramtable/HttpPanelParamTableModelTest.java:42: error: HttpPanelParamTableModel is abstract; cannot be instantiated
        HttpPanelParamTableModel model = new HttpPanelParamTableModel();
                                         ^
/home/lucas/tcc/reps/zaproxy/zap/src/test/java/org/zaproxy/zap/extension/httppanel/view/paramtable/HttpPanelParamTableModelTest.java:49: error: HttpPanelParamTableModel is abstract; cannot be instantiated
        HttpPanelParamTableModel model = new HttpPanelParamTableModel();
                                         ^
7 errors

FAILURE: Build failed with an exception.

* What went wrong:
Execution failed for task ':zap:compileTestJava'.
> Compilation failed; see the compiler error output for details.

* Try:
> Run with --info option to get more log output.
> Run with --scan to get full insights.

BUILD FAILED in 1s


Instructions for correction:
1. Review the provided test suite written in Java, using JUnit 5.
2. Identify the cause of the error based on the error output.
3. Make sure all imports are done correctly and the package is declared correctly
4. If required, create mock objects or add missing dependencies to ensure the tests run correctly.
5. If some test cases in the suite fail, just remove them from the suite
6. Ensure that the test suite code avoids using wildcard imports (static or non-static).
7. Return only the corrected and updated test suite code.

Below is the code of test suite. When executing the test suite, the following error output occurred.

Test suite:

package org.zaproxy.zap.extension.httppanel.view.paramtable;

import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;

public class HttpPanelParamTableModelTest {

    @Test
    void testGetColumnCount() {
        HttpPanelParamTableModel model = new HttpPanelParamTableModel();
        model.setEditable(true);
        assertEquals(4, model.getColumnCount());
    }

    @Test
    void testGetRowCount() {
        HttpPanelParamTableModel model = new HttpPanelParamTableModel();
        assertEquals(0, model.getRowCount());
    }

    @Test
    void testGetColumnClass() {
        HttpPanelParamTableModel model = new HttpPanelParamTableModel();
        assertEquals(String.class, model.getColumnClass(0));
    }

    @Test
    void testHasChanged() {
        HttpPanelParamTableModel model = new HttpPanelParamTableModel();
        assertEquals(false, model.hasChanged());
    }

    @Test
    void testIsCellEditable() {
        HttpPanelParamTableModel model = new HttpPanelParamTableModel();
        assertEquals(false, model.isCellEditable(0, 0));
    }

    @Test
    void testSetEditable() {
        HttpPanelParamTableModel model = new HttpPanelParamTableModel();
        model.setEditable(true);
        assertEquals(true, model.isCellEditable(0, 0));
    }

    @Test
    void testGetColumnName() {
        HttpPanelParamTableModel model = new HttpPanelParamTableModel();
        assertEquals("Type", model.getColumnName(0));
    }
}


Error output when running the test suite:
/home/lucas/tcc/reps/zaproxy/zap/src/test/java/org/zaproxy/zap/extension/httppanel/view/paramtable/HttpPanelParamTableModelTest.java:11: error: HttpPanelParamTableModel is abstract; cannot be instantiated
        HttpPanelParamTableModel model = new HttpPanelParamTableModel();
                                         ^
/home/lucas/tcc/reps/zaproxy/zap/src/test/java/org/zaproxy/zap/extension/httppanel/view/paramtable/HttpPanelParamTableModelTest.java:18: error: HttpPanelParamTableModel is abstract; cannot be instantiated
        HttpPanelParamTableModel model = new HttpPanelParamTableModel();
                                         ^
/home/lucas/tcc/reps/zaproxy/zap/src/test/java/org/zaproxy/zap/extension/httppanel/view/paramtable/HttpPanelParamTableModelTest.java:24: error: HttpPanelParamTableModel is abstract; cannot be instantiated
        HttpPanelParamTableModel model = new HttpPanelParamTableModel();
                                         ^
/home/lucas/tcc/reps/zaproxy/zap/src/test/java/org/zaproxy/zap/extension/httppanel/view/paramtable/HttpPanelParamTableModelTest.java:30: error: HttpPanelParamTableModel is abstract; cannot be instantiated
        HttpPanelParamTableModel model = new HttpPanelParamTableModel();
                                         ^
/home/lucas/tcc/reps/zaproxy/zap/src/test/java/org/zaproxy/zap/extension/httppanel/view/paramtable/HttpPanelParamTableModelTest.java:36: error: HttpPanelParamTableModel is abstract; cannot be instantiated
        HttpPanelParamTableModel model = new HttpPanelParamTableModel();
                                         ^
/home/lucas/tcc/reps/zaproxy/zap/src/test/java/org/zaproxy/zap/extension/httppanel/view/paramtable/HttpPanelParamTableModelTest.java:42: error: HttpPanelParamTableModel is abstract; cannot be instantiated
        HttpPanelParamTableModel model = new HttpPanelParamTableModel();
                                         ^
/home/lucas/tcc/reps/zaproxy/zap/src/test/java/org/zaproxy/zap/extension/httppanel/view/paramtable/HttpPanelParamTableModelTest.java:49: error: HttpPanelParamTableModel is abstract; cannot be instantiated
        HttpPanelParamTableModel model = new HttpPanelParamTableModel();
                                         ^
7 errors

FAILURE: Build failed with an exception.

* What went wrong:
Execution failed for task ':zap:compileTestJava'.
> Compilation failed; see the compiler error output for details.

* Try:
> Run with --info option to get more log output.
> Run with --scan to get full insights.

BUILD FAILED in 1s


Instructions for correction:
1. Review the provided test suite written in Java, using JUnit 5.
2. Identify the cause of the error based on the error output.
3. Make sure all imports are done correctly and the package is declared correctly
4. If required, create mock objects or add missing dependencies to ensure the tests run correctly.
5. If some test cases in the suite fail, just remove them from the suite
6. Ensure that the test suite code avoids using wildcard imports (static or non-static).
7. Return only the corrected and updated test suite code.

Below is the code of test suite. When executing the test suite, the following error output occurred.

Test suite:

package org.zaproxy.zap.extension.httppanel.view.paramtable;

import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;

public class HttpPanelParamTableModelTest {

    @Test
    void testGetColumnCount() {
        HttpPanelParamTableModel model = new HttpPanelParamTableModel(null); 
        model.setEditable(true);
        assertEquals(4, model.getColumnCount());
    }

    @Test
    void testGetRowCount() {
        HttpPanelParamTableModel model = new HttpPanelParamTableModel(null); 
        assertEquals(0, model.getRowCount());
    }

    @Test
    void testGetColumnClass() {
        HttpPanelParamTableModel model = new HttpPanelParamTableModel(null); 
        assertEquals(String.class, model.getColumnClass(0));
    }

    @Test
    void testHasChanged() {
        HttpPanelParamTableModel model = new HttpPanelParamTableModel(null); 
        assertEquals(false, model.hasChanged());
    }

    @Test
    void testIsCellEditable() {
        HttpPanelParamTableModel model = new HttpPanelParamTableModel(null); 
        assertEquals(false, model.isCellEditable(0, 0));
    }

    @Test
    void testSetEditable() {
        HttpPanelParamTableModel model = new HttpPanelParamTableModel(null); 
        model.setEditable(true);
        assertEquals(true, model.isCellEditable(0, 0));
    }

    @Test
    void testGetColumnName() {
        HttpPanelParamTableModel model = new HttpPanelParamTableModel(null); 
        assertEquals("Type", model.getColumnName(0));
    }
}


Error output when running the test suite:
/home/lucas/tcc/reps/zaproxy/zap/src/test/java/org/zaproxy/zap/extension/httppanel/view/paramtable/HttpPanelParamTableModelTest.java:11: error: HttpPanelParamTableModel is abstract; cannot be instantiated
        HttpPanelParamTableModel model = new HttpPanelParamTableModel(null); // Add required constructor parameter or create a mock object
                                         ^
/home/lucas/tcc/reps/zaproxy/zap/src/test/java/org/zaproxy/zap/extension/httppanel/view/paramtable/HttpPanelParamTableModelTest.java:18: error: HttpPanelParamTableModel is abstract; cannot be instantiated
        HttpPanelParamTableModel model = new HttpPanelParamTableModel(null); // Add required constructor parameter or create a mock object
                                         ^
/home/lucas/tcc/reps/zaproxy/zap/src/test/java/org/zaproxy/zap/extension/httppanel/view/paramtable/HttpPanelParamTableModelTest.java:24: error: HttpPanelParamTableModel is abstract; cannot be instantiated
        HttpPanelParamTableModel model = new HttpPanelParamTableModel(null); // Add required constructor parameter or create a mock object
                                         ^
/home/lucas/tcc/reps/zaproxy/zap/src/test/java/org/zaproxy/zap/extension/httppanel/view/paramtable/HttpPanelParamTableModelTest.java:30: error: HttpPanelParamTableModel is abstract; cannot be instantiated
        HttpPanelParamTableModel model = new HttpPanelParamTableModel(null); // Add required constructor parameter or create a mock object
                                         ^
/home/lucas/tcc/reps/zaproxy/zap/src/test/java/org/zaproxy/zap/extension/httppanel/view/paramtable/HttpPanelParamTableModelTest.java:36: error: HttpPanelParamTableModel is abstract; cannot be instantiated
        HttpPanelParamTableModel model = new HttpPanelParamTableModel(null); // Add required constructor parameter or create a mock object
                                         ^
/home/lucas/tcc/reps/zaproxy/zap/src/test/java/org/zaproxy/zap/extension/httppanel/view/paramtable/HttpPanelParamTableModelTest.java:42: error: HttpPanelParamTableModel is abstract; cannot be instantiated
        HttpPanelParamTableModel model = new HttpPanelParamTableModel(null); // Add required constructor parameter or create a mock object
                                         ^
/home/lucas/tcc/reps/zaproxy/zap/src/test/java/org/zaproxy/zap/extension/httppanel/view/paramtable/HttpPanelParamTableModelTest.java:49: error: HttpPanelParamTableModel is abstract; cannot be instantiated
        HttpPanelParamTableModel model = new HttpPanelParamTableModel(null); // Add required constructor parameter or create a mock object
                                         ^
7 errors

FAILURE: Build failed with an exception.

* What went wrong:
Execution failed for task ':zap:compileTestJava'.
> Compilation failed; see the compiler error output for details.

* Try:
> Run with --info option to get more log output.
> Run with --scan to get full insights.

BUILD FAILED in 1s


Generate unit test cases for the following method(s) in JUnit 5:

- Method name(s): isFiltered, getFilterType
- Class name: UrlPatternScanFilter
- Class path: /home/lucas/tcc/reps/zaproxy/zap/src/main/java/org/zaproxy/zap/extension/ascan/filters/impl/UrlPatternScanFilter.java
- The class is written in Java.
- Create the unit tests using the following libraries: org.hamcrest and org.junit.jupiter.api.Test.

Follow these instructions carefully:
1. The test class name should be UrlPatternScanFilterTest.
2. If necessary, create mock objects.
3. Implement the test logic for each method, including setup, execution, and verification of results.
4. Use assertions to verify that the method behaves as expected.
5. Include the correct package declaration at the top of the file.
6. Ensure that all necessary imports for classes used in the tests are included.
7. Each test case should be clearly named and include specific logic to test different scenarios and edge cases.
8. Avoid generating test methods with placeholder comments. 
9. Make sure each test has assertion.

Make sure the tests are complete and avoid compile errors.

Class Code:

package org.zaproxy.zap.extension.ascan.filters.impl;

import java.util.regex.Pattern;
import org.parosproxy.paros.Constant;
import org.parosproxy.paros.model.HistoryReference;
import org.zaproxy.zap.extension.ascan.filters.FilterResult;
import org.zaproxy.zap.model.StructuralNode;


public class UrlPatternScanFilter extends AbstractGenericScanFilter<Pattern, String> {

    private static final String FILTER_TYPE = "scan.filter.filterType.URLPattern";

    public UrlPatternScanFilter() {
        super(
                (patterns, value) ->
                        patterns.stream().anyMatch((pattern) -> pattern.matcher(value).matches()));
    }

    @Override
    public FilterResult isFiltered(StructuralNode node) {
        HistoryReference hRef = node.getHistoryReference();
        return this.isFiltered(hRef.getURI().toString());
    }

    @Override
    public String getFilterType() {
        return Constant.messages.getString(FILTER_TYPE);
    }
}
Instructions for correction:
1. Review the provided test suite written in Java, using JUnit 5.
2. Identify the cause of the error based on the error output.
3. Make sure all imports are done correctly and the package is declared correctly
4. If required, create mock objects or add missing dependencies to ensure the tests run correctly.
5. If some test cases in the suite fail, just remove them from the suite
6. Ensure that the test suite code avoids using wildcard imports (static or non-static).
7. Return only the corrected and updated test suite code.

Below is the code of test suite. When executing the test suite, the following error output occurred.

Test suite:

package org.zaproxy.zap.extension.ascan.filters.impl;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import java.util.regex.Pattern;

import org.junit.jupiter.api.Test;
import org.zaproxy.zap.extension.ascan.filters.FilterResult;
import org.zaproxy.zap.model.StructuralNode;

public class UrlPatternScanFilterTest {

    @Test
    public void testIsFiltered_NotFiltered() {
        UrlPatternScanFilter filter = new UrlPatternScanFilter();
        StructuralNode node = mock(StructuralNode.class);
        when(node.getHistoryReference().getURI().toString()).thenReturn("http:
        
        FilterResult result = filter.isFiltered(node);
        
        assertEquals(FilterResult.NOT_FILTERED, result);
    }
    
    @Test
    public void testIsFiltered_Filtered() {
        UrlPatternScanFilter filter = new UrlPatternScanFilter();
        StructuralNode node = mock(StructuralNode.class);
        when(node.getHistoryReference().getURI().toString()).thenReturn("https:
        
        FilterResult result = filter.isFiltered(node);
        
        assertEquals(FilterResult.FILTERED, result);
    }
    
    @Test
    public void testGetFilterType() {
        UrlPatternScanFilter filter = new UrlPatternScanFilter();
        
        String filterType = filter.getFilterType();
        
        assertEquals("scan.filter.filterType.URLPattern", filterType);
    }
}


Error output when running the test suite:
/home/lucas/tcc/reps/zaproxy/zap/src/test/java/org/zaproxy/zap/extension/ascan/filters/impl/UrlPatternScanFilterTest.java:35: error: cannot find symbol
        assertEquals(FilterResult.FILTERED, result);
                                 ^
  symbol:   variable FILTERED
  location: class FilterResult
1 error

FAILURE: Build failed with an exception.

* What went wrong:
Execution failed for task ':zap:compileTestJava'.
> Compilation failed; see the compiler error output for details.

* Try:
> Run with --info option to get more log output.
> Run with --scan to get full insights.

BUILD FAILED in 1s


Instructions for correction:
1. Review the provided test suite written in Java, using JUnit 5.
2. Identify the cause of the error based on the error output.
3. Make sure all imports are done correctly and the package is declared correctly
4. If required, create mock objects or add missing dependencies to ensure the tests run correctly.
5. If some test cases in the suite fail, just remove them from the suite
6. Ensure that the test suite code avoids using wildcard imports (static or non-static).
7. Return only the corrected and updated test suite code.

Below is the code of test suite. When executing the test suite, the following error output occurred.

Test suite:

package org.zaproxy.zap.extension.ascan.filters.impl;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import org.junit.jupiter.api.Test;
import org.zaproxy.zap.extension.ascan.filters.FilterResult;
import org.zaproxy.zap.model.StructuralNode;

public class UrlPatternScanFilterTest {

    @Test
    public void testIsFiltered_NotFiltered() {
        UrlPatternScanFilter filter = new UrlPatternScanFilter();
        StructuralNode node = mock(StructuralNode.class);
        when(node.getHistoryReference().getURI().toString()).thenReturn("http:");
        
        FilterResult result = filter.isFiltered(node);
        
        assertEquals(FilterResult.NOT_FILTERED, result);
    }
    
    @Test
    public void testIsFiltered_Filtered() {
        UrlPatternScanFilter filter = new UrlPatternScanFilter();
        StructuralNode node = mock(StructuralNode.class);
        when(node.getHistoryReference().getURI().toString()).thenReturn("https:");
        
        FilterResult result = filter.isFiltered(node);
        
        assertEquals(FilterResult.FILTERED, result);
    }
    
    @Test
    public void testGetFilterType() {
        UrlPatternScanFilter filter = new UrlPatternScanFilter();
        
        String filterType = filter.getFilterType();
        
        assertEquals("scan.filter.filterType.URLPattern", filterType);
    }
}


Error output when running the test suite:
/home/lucas/tcc/reps/zaproxy/zap/src/test/java/org/zaproxy/zap/extension/ascan/filters/impl/UrlPatternScanFilterTest.java:33: error: cannot find symbol
        assertEquals(FilterResult.FILTERED, result);
                                 ^
  symbol:   variable FILTERED
  location: class FilterResult
1 error

FAILURE: Build failed with an exception.

* What went wrong:
Execution failed for task ':zap:compileTestJava'.
> Compilation failed; see the compiler error output for details.

* Try:
> Run with --info option to get more log output.
> Run with --scan to get full insights.

BUILD FAILED in 1s


Instructions for correction:
1. Review the provided test suite written in Java, using JUnit 5.
2. Identify the cause of the error based on the error output.
3. Make sure all imports are done correctly and the package is declared correctly
4. If required, create mock objects or add missing dependencies to ensure the tests run correctly.
5. If some test cases in the suite fail, just remove them from the suite
6. Ensure that the test suite code avoids using wildcard imports (static or non-static).
7. Return only the corrected and updated test suite code.

Below is the code of test suite. When executing the test suite, the following error output occurred.

Test suite:

package org.zaproxy.zap.extension.ascan.filters.impl;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import org.junit.jupiter.api.Test;
import org.zaproxy.zap.extension.ascan.filters.FilterResult;
import org.zaproxy.zap.model.StructuralNode;

public class UrlPatternScanFilterTest {

    @Test
    public void testIsFiltered_NotFiltered() {
        UrlPatternScanFilter filter = new UrlPatternScanFilter();
        StructuralNode node = mock(StructuralNode.class);
        when(node.getHistoryReference().getURI().toString()).thenReturn("http:");
        
        FilterResult result = filter.isFiltered(node);
        
        assertEquals(FilterResult.NOT_FILTERED, result);
    }
    
    @Test
    public void testIsFiltered_Filtered() {
        UrlPatternScanFilter filter = new UrlPatternScanFilter();
        StructuralNode node = mock(StructuralNode.class);
        when(node.getHistoryReference().getURI().toString()).thenReturn("https:");
        
        FilterResult result = filter.isFiltered(node);
        
        assertEquals(FilterResult.FILTERED, result);
    }
    
    @Test
    public void testGetFilterType() {
        UrlPatternScanFilter filter = new UrlPatternScanFilter();
        
        String filterType = filter.getFilterType();
        
        assertEquals("scan.filter.filterType.URLPattern", filterType);
    }
}


Error output when running the test suite:
/home/lucas/tcc/reps/zaproxy/zap/src/test/java/org/zaproxy/zap/extension/ascan/filters/impl/UrlPatternScanFilterTest.java:33: error: cannot find symbol
        assertEquals(FilterResult.FILTERED, result);
                                 ^
  symbol:   variable FILTERED
  location: class FilterResult
1 error

FAILURE: Build failed with an exception.

* What went wrong:
Execution failed for task ':zap:compileTestJava'.
> Compilation failed; see the compiler error output for details.

* Try:
> Run with --info option to get more log output.
> Run with --scan to get full insights.

BUILD FAILED in 1s


Instructions for correction:
1. Review the provided test suite written in Java, using JUnit 5.
2. Identify the cause of the error based on the error output.
3. Make sure all imports are done correctly and the package is declared correctly
4. If required, create mock objects or add missing dependencies to ensure the tests run correctly.
5. If some test cases in the suite fail, just remove them from the suite
6. Ensure that the test suite code avoids using wildcard imports (static or non-static).
7. Return only the corrected and updated test suite code.

Below is the code of test suite. When executing the test suite, the following error output occurred.

Test suite:

package org.zaproxy.zap.extension.ascan.filters.impl;

import org.junit.jupiter.api.Test;
import org.zaproxy.zap.extension.ascan.filters.FilterResult;
import org.zaproxy.zap.model.StructuralNode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class UrlPatternScanFilterTest {

    @Test
    public void testIsFiltered_NotFiltered() {
        UrlPatternScanFilter filter = new UrlPatternScanFilter();
        StructuralNode node = mock(StructuralNode.class);
        when(node.getHistoryReference().getURI().toString()).thenReturn("http:");
        
        FilterResult result = filter.isFiltered(node);
        
        assertEquals(FilterResult.NOT_FILTERED, result);
    }
    
    @Test
    public void testIsFiltered_Filtered() {
        UrlPatternScanFilter filter = new UrlPatternScanFilter();
        StructuralNode node = mock(StructuralNode.class);
        when(node.getHistoryReference().getURI().toString()).thenReturn("https:");
        
        FilterResult result = filter.isFiltered(node);
        
        assertEquals(FilterResult.FILTERED, result);
    }
    
    @Test
    public void testGetFilterType() {
        UrlPatternScanFilter filter = new UrlPatternScanFilter();
        
        String filterType = filter.getFilterType();
        
        assertEquals("scan.filter.filterType.URLPattern", filterType);
    }
}


Error output when running the test suite:
/home/lucas/tcc/reps/zaproxy/zap/src/test/java/org/zaproxy/zap/extension/ascan/filters/impl/UrlPatternScanFilterTest.java:33: error: cannot find symbol
        assertEquals(FilterResult.FILTERED, result);
                                 ^
  symbol:   variable FILTERED
  location: class FilterResult
1 error

FAILURE: Build failed with an exception.

* What went wrong:
Execution failed for task ':zap:compileTestJava'.
> Compilation failed; see the compiler error output for details.

* Try:
> Run with --info option to get more log output.
> Run with --scan to get full insights.

BUILD FAILED in 1s


